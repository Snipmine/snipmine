[
[
  487422,
  "`dumpInProgress` = true;\n`lock`.writeLock().lock();\n",
  0,
  [
    "sm:hc:e8db72d8",
    "sm:import:com.flaptor.indextank.index.scorer.UserFunctionsManager,1",
    "sm:import:java.io.IOException,1",
    "sm:import:com.flaptor.indextank.BoostingIndexer,1",
    "sm:depth:5",
    "sm:src:/home/alex/bachelor/eval2/repos/linkedin/indextank-engine/src/main/java/com/flaptor/indextank/dealer/Dealer.java",
    "sm:input:`lock`=java.util.concurrent.locks.ReentrantReadWriteLock",
    "sm:import:com.flaptor.indextank.index.rti.RealTimeIndex,1",
    "sm:import:java.util.Map.Entry,1",
    "sm:import:org.apache.log4j.Logger,1",
    "sm:import:com.flaptor.util.Execute,1",
    "sm:import:java.util.concurrent.locks.ReentrantReadWriteLock,1",
    "sm:import:com.flaptor.indextank.index.scorer.DynamicDataManager,1",
    "sm:import:com.flaptor.indextank.index.lsi.DumpCompletionListener,1",
    "sm:import:com.flaptor.indextank.index.Document,1",
    "sm:input:`dumpInProgress`=boolean",
    "sm:import:com.flaptor.indextank.suggest.Suggestor,1",
    "sm:import:com.flaptor.indextank.index.lsi.LargeScaleIndex,1",
    "sm:import:java.util.Map,1",
    "sm:order:11",
    "sm:import:java.util.Collections,1",
    "sm:import:com.google.common.collect.Maps,1",
    "sm:import:java.util.HashMap,1",
    "sm:import:com.flaptor.indextank.index.Promoter,1",
    "sm:import:java.util.concurrent.atomic.AtomicInteger,1",
    "sm:import:com.flaptor.indextank.IndexRecoverer,1",
    "sm:import:com.google.common.base.Preconditions,1"
  ]
],[
  409594,
  "`value0` = (`value0` << 1) ^ (`value0` >> 63);\nif (`value0` >>> 7 == 0) `Placeholder` else {\n    `buffer0`.put((byte) ((`value0` & 0x7F) | 0x80));\n    if (`value0` >>> 14 == 0) `Placeholder` else {\n        `buffer0`.put((byte) (`value0` >>> 7 | 0x80));\n        if (`value0` >>> 21 == 0) `Placeholder`\n    }\n}\n",
  0,
  [
    "sm:input:`value0`=long",
    "sm:src:/home/alex/bachelor/eval2/repos/HdrHistogram/HdrHistogram/src/main/java/org/HdrHistogram/ZigZagEncoding.java",
    "sm:import:java.nio.ByteBuffer,1",
    "sm:depth:14",
    "sm:order:63",
    "sm:hc:ec680cd2",
    "sm:input:`buffer0`=java.nio.ByteBuffer"
  ]
],[
  136800,
  "for(int `i0` = 0; `i0` < `TOTAL_RUNS`; `i0`++) {\n    `stopWatch`();\n    for(Vertex `vertex0` : `graph0`.getVertices()) {\n        `counter0`++;\n        for(Edge `edge0` : `vertex0`.getEdges(`com.tinkerpop.blueprints.Direction.OUT`)) `Placeholder`\n    }\n    BaseTest.printPerformance(`graph0`.toString(), `counter0`, \"Neo4jGraph elements touched\", `currentTime0`);\n}",
  0,
  [
    "sm:import:com.tinkerpop.blueprints.util.io.graphml.GraphMLReader,1",
    "sm:src:/home/alex/bachelor/eval2/repos/tinkerpop/blueprints/blueprints-neo4j-graph/src/test/java/com/tinkerpop/blueprints/impls/neo4j/Neo4jBenchmarkTestSuite.java",
    "sm:import:org.neo4j.graphdb.Relationship,1",
    "sm:hc:f4d71b9b",
    "sm:import:com.tinkerpop.blueprints.BaseTest,1",
    "sm:input:`counter0`=int",
    "sm:import:com.tinkerpop.blueprints.impls.GraphTest,1",
    "sm:import:com.tinkerpop.blueprints.TestSuite,1",
    "sm:input:`graph0`=com.tinkerpop.blueprints.Graph",
    "sm:depth:10",
    "sm:import:org.neo4j.graphdb.Node,1",
    "sm:import:com.tinkerpop.blueprints.Graph,1",
    "sm:import:com.tinkerpop.blueprints.Vertex,1",
    "sm:import:org.neo4j.graphdb.GraphDatabaseService,1",
    "sm:input:`currentTime0`=double",
    "sm:input:`stopWatch`=double()",
    "sm:import:org.neo4j.graphdb.Direction,1",
    "sm:input:`com.tinkerpop.blueprints.Direction.OUT`=com.tinkerpop.blueprints.Direction",
    "sm:input:`TOTAL_RUNS`=int",
    "sm:order:49",
    "sm:import:com.tinkerpop.blueprints.Edge,1"
  ]
],[
  403454,
  "int `preSize0` = `wordNetOptimum0`.size();\nif (`wordNetOptimum0`.size() != `preSize0`) {\n    `vertexList0` = `dijkstra`(`graph0`);\n    if (`HanLP.Config.DEBUG`) `Placeholder`\n}\n",
  0,
  [
    "sm:input:`graph0`=com.hankcs.hanlp.seg.common.Graph",
    "sm:import:com.hankcs.hanlp.seg.common,1",
    "sm:output:`preSize0`=int",
    "sm:import:com.hankcs.hanlp.seg.Dijkstra.Path.State,1",
    "sm:input:`HanLP.Config.DEBUG`=boolean",
    "sm:import:com.hankcs.hanlp.recognition.nr.JapanesePersonRecognition,1",
    "sm:import:com.hankcs.hanlp.recognition.nr.TranslatedPersonRecognition,1",
    "sm:input:`wordNetOptimum0`=com.hankcs.hanlp.seg.common.WordNet",
    "sm:import:com.hankcs.hanlp.HanLP,1",
    "sm:import:com.hankcs.hanlp.seg.WordBasedGenerativeModelSegment,1",
    "sm:input:`dijkstra`=java.util.List<com.hankcs.hanlp.seg.common.Vertex>(com.hankcs.hanlp.seg.common.Graph)",
    "sm:import:java.util,1",
    "sm:src:/home/alex/bachelor/eval2/repos/hankcs/HanLP/src/main/java/com/hankcs/hanlp/seg/Dijkstra/DijkstraSegment.java",
    "sm:depth:8",
    "sm:import:com.hankcs.hanlp.recognition.nt.OrganizationRecognition,1",
    "sm:order:26",
    "sm:import:com.hankcs.hanlp.recognition.nr.PersonRecognition,1",
    "sm:input:`vertexList0`=java.util.List<com.hankcs.hanlp.seg.common.Vertex>",
    "sm:import:com.hankcs.hanlp.recognition.ns.PlaceRecognition,1",
    "sm:hc:b7fbf6bb"
  ]
],[
  154963,
  "if (`args.length` != 4) `Placeholder`\nApnsDelegate `delegate0` = new ApnsDelegate();\n`svc0`.start();\n`System.out`.println(\"Sending message\");\n`System.out`.println(\"Stopping service\");\n",
  0,
  [
    "sm:input:`svc0`=com.notnoop.apns.ApnsService",
    "sm:input:`args.length`=int",
    "sm:hc:18a22a01",
    "sm:import:java.io.FileInputStream,1",
    "sm:import:java.util.Map,1",
    "sm:import:com.notnoop.exceptions.InvalidSSLConfig,1",
    "sm:output:`delegate0`=com.notnoop.apns.ApnsDelegate",
    "sm:import:java.io.FileNotFoundException,1",
    "sm:import:java.util.Map.Entry,1",
    "sm:import:java.util.Date,1",
    "sm:order:27",
    "sm:depth:6",
    "sm:src:/home/alex/bachelor/eval2/repos/notnoop/java-apns/src/test/java/com/notnoop/apns/MainClass.java",
    "sm:input:`System.out`=java.io.PrintStream"
  ]
],[
  65521,
  "Headers `headers0` = Headers.of(\"foo\", \"bar\");\nassertThat(`response0`.headers().toMultimap()).isEqualTo(`headers0`.toMultimap());\nassertThat(`response0`.body()).isSameAs(`body0`);\n",
  0,
  [
    "sm:depth:7",
    "sm:import:org.assertj.core.api.Assertions.assertThat,1",
    "sm:import:org.junit.Assert.fail,1",
    "sm:import:okhttp3.Headers,1",
    "sm:hc:952190b9",
    "sm:input:`response0`=retrofit2.Response<java.lang.Object>",
    "sm:import:okhttp3.Protocol,1",
    "sm:import:org.junit.Test,1",
    "sm:import:okhttp3.ResponseBody,1",
    "sm:output:`headers0`=okhttp3.Headers",
    "sm:input:`body0`=java.lang.Object",
    "sm:order:33",
    "sm:src:/home/alex/bachelor/eval2/repos/square/retrofit/retrofit/src/test/java/retrofit2/ResponseTest.java"
  ]
],[
  483312,
  "`g0`.writeStringField(\"type\", \"metric\");\nList<String> `typeNames0` = `getTypeNames`();\n`g0`.writeEndObject();\n`g0`.close();\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:java.io.IOException,1",
    "sm:import:com.google.common.collect.ImmutableList,1",
    "sm:import:com.googlecode.jmxtrans.model.Result,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:depth:6",
    "sm:hc:a10da3bb",
    "sm:import:com.fasterxml.jackson.core.JsonFactory,1",
    "sm:import:lombok.ToString,1",
    "sm:order:22",
    "sm:import:java.net.Socket,1",
    "sm:import:com.fasterxml.jackson.core.JsonEncoding,1",
    "sm:import:com.googlecode.jmxtrans.model.ValidationException,1",
    "sm:import:java.io.OutputStream,1",
    "sm:import:com.fasterxml.jackson.annotation.JsonCreator,1",
    "sm:input:`getTypeNames`=com.google.common.collect.ImmutableList()",
    "sm:import:com.fasterxml.jackson.core.JsonGenerator,1",
    "sm:import:java.util.Map,1",
    "sm:import:lombok.EqualsAndHashCode,1",
    "sm:import:com.googlecode.jmxtrans.model.Query,1",
    "sm:import:java.util.List,1",
    "sm:import:com.fasterxml.jackson.annotation.JsonProperty,1",
    "sm:output:`typeNames0`=java.util.List<java.lang.String>",
    "sm:import:com.googlecode.jmxtrans.util.NumberUtils.isNumeric,1",
    "sm:import:com.googlecode.jmxtrans.model.Server,1",
    "sm:import:java.util.concurrent.TimeUnit,1",
    "sm:input:`g0`=com.fasterxml.jackson.core.JsonGenerator",
    "sm:import:com.googlecode.jmxtrans.model.naming.KeyUtils,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jmxtrans/jmxtrans/jmxtrans-output/jmxtrans-output-core/src/main/java/com/googlecode/jmxtrans/model/output/SensuWriter.java"
  ]
],[
  212975,
  "String `line0` = `st0`.nextToken();\nif (`line0`.matches(`PATTERNS_USERAGENT`)) `Placeholder` else if (`line0`.matches(`PATTERNS_DISALLOW`)) {\n    if (`path0`.endsWith(\"*\")) `Placeholder`\n    `path0` = `path0`.trim();\n    if (!`path0`.isEmpty()) `Placeholder`\n} else `Placeholder`\n",
  0,
  [
    "sm:import:java.util.StringTokenizer,1",
    "sm:input:`path0`=java.lang.String",
    "sm:input:`PATTERNS_USERAGENT`=java.lang.String",
    "sm:depth:9",
    "sm:output:`line0`=java.lang.String",
    "sm:input:`st0`=java.util.StringTokenizer",
    "sm:hc:1bb29617",
    "sm:input:`PATTERNS_DISALLOW`=java.lang.String",
    "sm:order:41",
    "sm:src:/home/alex/bachelor/eval2/repos/yasserg/crawler4j/src/main/java/edu/uci/ics/crawler4j/robotstxt/RobotstxtParser.java"
  ]
],[
  331756,
  "if (`root0` instanceof ProtoMember) {\n    String `member0` = ((ProtoMember) `root0`).member();\n    if (`type0` instanceof MessageType) `Placeholder` else `Placeholder`\n} else if (`root0` instanceof ProtoType) {\n    Service `service1` = `schema`.getService(`protoType0`);\n    if (`service1` != null) `Placeholder`\n} else `Placeholder`",
  0,
  [
    "sm:input:`protoType0`=com.squareup.wire.schema.ProtoType",
    "sm:input:`root0`=java.lang.Object",
    "sm:order:44",
    "sm:src:/home/alex/bachelor/eval2/repos/square/wire/wire-schema/src/main/java/com/squareup/wire/schema/Pruner.java",
    "sm:import:java.util.Map,1",
    "sm:import:com.google.common.collect.ImmutableList,1",
    "sm:input:`type0`=com.squareup.wire.schema.Type",
    "sm:import:java.util.Deque,1",
    "sm:import:java.util.ArrayDeque,1",
    "sm:depth:10",
    "sm:hc:e7fca11e",
    "sm:input:`schema`=com.squareup.wire.schema.Schema"
  ]
],[
  188395,
  "SchSession `schSession0` = `userSchSessions0`.getSchSessionMap().get(`id`);\nif (`schSession0` != null) {\n    if (`schSession0`.getChannel() != null) `schSession0`.getChannel().disconnect();\n    `schSession0`.setOutFromChannel(null);\n}\n`userSchSessions0`.getSchSessionMap().remove(`id`);\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:java.io.BufferedReader,1",
    "sm:import:java.util,1",
    "sm:import:org.apache.struts2.interceptor.ServletResponseAware,1",
    "sm:import:com.keybox.manage.util.SSHUtil,1",
    "sm:import:com.keybox.manage.db,1",
    "sm:import:org.apache.struts2.interceptor.ServletRequestAware,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:com.opensymphony.xwork2.ActionSupport,1",
    "sm:hc:19a6a24b",
    "sm:depth:9",
    "sm:import:org.apache.struts2.convention.annotation.Result,1",
    "sm:output:`schSession0`=com.keybox.manage.model.SchSession",
    "sm:import:com.keybox.common.util.AuthUtil,1",
    "sm:import:com.keybox.manage.model,1",
    "sm:import:java.io.StringReader,1",
    "sm:import:java.util.concurrent.ConcurrentHashMap,1",
    "sm:import:com.jcraft.jsch.ChannelShell,1",
    "sm:input:`userSchSessions0`=com.keybox.manage.model.UserSchSessions",
    "sm:import:javax.servlet.http.HttpServletResponse,1",
    "sm:order:42",
    "sm:import:com.keybox.manage.model.SortedSet,1",
    "sm:import:org.apache.struts2.convention.annotation.Action,1",
    "sm:import:javax.servlet.http.HttpServletRequest,1",
    "sm:src:/home/alex/bachelor/eval2/repos/skavanagh/KeyBox/src/main/java/com/keybox/manage/action/SecureShellAction.java",
    "sm:input:`id`=java.lang.Integer"
  ]
],[
  106473,
  "LexemePath `path0` = `this.pathMap`.get(`index0`);\nif (`path0` != null) {\n    Lexeme `l0` = `path0`.pollFirst();\n    while (`l0` != null) `Placeholder`\n} else {\n    `outputSingleCJK`(`index0`);\n    `index0`++;\n}\n",
  0,
  [
    "sm:input:`outputSingleCJK`=void(int)",
    "sm:src:/home/alex/bachelor/eval2/repos/medcl/elasticsearch-analysis-ik/src/main/java/org/wltea/analyzer/core/AnalyzeContext.java",
    "sm:import:java.io.IOException,1",
    "sm:import:java.util.HashSet,1",
    "sm:import:java.io.Reader,1",
    "sm:order:38",
    "sm:import:java.util.Map,1",
    "sm:import:java.util.Set,1",
    "sm:depth:9",
    "sm:output:`path0`=org.wltea.analyzer.core.LexemePath",
    "sm:hc:e665b8dc",
    "sm:import:java.util.LinkedList,1",
    "sm:input:`this.pathMap`=java.util.Map<java.lang.Integer,org.wltea.analyzer.core.LexemePath>",
    "sm:import:org.wltea.analyzer.dic.Dictionary,1",
    "sm:import:java.util.HashMap,1",
    "sm:input:`index0`=int"
  ]
],[
  354981,
  "int `i00` = `in0`[`ip0`++] & 0xff;\n`op0`++;\n`out0`[`op0`] = `op0` < `oDataLen0` ? `map1`[`o30`] : '=';\n`op0`++;\n",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/Mashape/unirest-java/src/main/java/com/mashape/unirest/http/utils/Base64Coder.java",
    "sm:input:`ip0`=int",
    "sm:input:`op0`=int",
    "sm:output:`i00`=int",
    "sm:input:`o30`=int",
    "sm:input:`in0`=byte[]",
    "sm:input:`oDataLen0`=int",
    "sm:input:`map1`=char[]",
    "sm:depth:8",
    "sm:hc:b7150282",
    "sm:order:31",
    "sm:input:`out0`=char[]"
  ]
],[
  352222,
  "if (`entry0` == null) `Placeholder`\nif (`entry0`.isExpired()) {\n    `request0`.addMarker(\"cache-hit-expired\");\n    `mNetworkQueue`.put(`request0`);\n}\nif (!`entry0`.refreshNeeded()) `Placeholder`\n",
  0,
  [
    "sm:input:`entry0`=com.android.volley.Cache.Entry",
    "sm:input:`mNetworkQueue`=java.util.concurrent.BlockingQueue<com.android.volley.Request<?>>",
    "sm:hc:7eae0f4",
    "sm:order:28",
    "sm:depth:7",
    "sm:src:/home/alex/bachelor/eval2/repos/mcxiaoke/android-volley/src/main/java/com/android/volley/CacheDispatcher.java",
    "sm:input:`request0`=com.android.volley.Request<?>",
    "sm:import:android.os.Process,1",
    "sm:import:java.util.concurrent.BlockingQueue,1"
  ]
],[
  586560,
  "MethodConverterPair `workflowImplementationMethod0` = null;\nfor(Method `method0` : `interfaze0`.getMethods()) {\n    Execute `executeAnnotation0` = `method0`.getAnnotation(Execute.class);\n    if (`executeAnnotation0` != null) {\n        if (`workflowImplementationMethod0` != null) `Placeholder`\n        `workflowType0` = `getWorkflowType`(`interfaceName0`, `method0`, `executeAnnotation0`);\n        if (`skipRegistrationAnnotation0` == null) {\n            if (`registrationOptionsAnnotation0` == null) `Placeholder`\n            `registrationOptions0` = `createRegistrationOptions`(`registrationOptionsAnnotation0`);\n        } else `Placeholder`\n    }\n}\n",
  0,
  [
    "sm:import:java.util.HashSet,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.common.FlowConstants,1",
    "sm:input:`createRegistrationOptions`=com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions(com.amazonaws.services.simpleworkflow.flow.annotations.WorkflowRegistrationOptions)",
    "sm:output:`workflowImplementationMethod0`=com.amazonaws.services.simpleworkflow.flow.pojo.MethodConverterPair",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.Execute,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.core.Promise,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.generic.WorkflowDefinitionFactory,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.Workflow,1",
    "sm:import:java.util.Collection,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.JsonDataConverter,1",
    "sm:hc:acf278a4",
    "sm:import:java.lang.reflect.Method,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.Signal,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.NullDataConverter,1",
    "sm:input:`interfaceName0`=java.lang.String",
    "sm:input:`skipRegistrationAnnotation0`=com.amazonaws.services.simpleworkflow.flow.annotations.SkipTypeRegistration",
    "sm:input:`registrationOptions0`=com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.GetState,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.WorkflowRegistrationOptions,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions,1",
    "sm:input:`getWorkflowType`=com.amazonaws.services.simpleworkflow.model.WorkflowType(java.lang.String,java.lang.reflect.Method,com.amazonaws.services.simpleworkflow.flow.annotations.Execute)",
    "sm:import:java.util.Map,1",
    "sm:import:com.amazonaws.services.simpleworkflow.model.WorkflowType,1",
    "sm:order:63",
    "sm:import:java.util.Set,1",
    "sm:import:java.util.List,1",
    "sm:input:`interfaze0`=java.lang.Class<?>",
    "sm:src:/home/alex/bachelor/eval2/repos/aws/aws-sdk-java/aws-java-sdk-swf-libraries/src/main/java/com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.java",
    "sm:import:java.util.HashMap,1",
    "sm:import:java.util.ArrayList,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.generic.WorkflowDefinitionFactoryFactory,1",
    "sm:depth:14",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.annotations.SkipTypeRegistration,1",
    "sm:input:`workflowType0`=com.amazonaws.services.simpleworkflow.model.WorkflowType",
    "sm:input:`registrationOptionsAnnotation0`=com.amazonaws.services.simpleworkflow.flow.annotations.WorkflowRegistrationOptions",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.DataConverter,1",
    "sm:import:com.amazonaws.services.simpleworkflow.flow.DecisionContext,1",
    "sm:import:java.beans.Expression,1"
  ]
],[
  438236,
  "while (Math.sqrt(`residualNormSquared`) > `maxError0` && `iterations` < `maxIterations0`) {\n    if (`preconditioner0` == null) `Placeholder`\n    ++`iterations`;\n    if (`iterations` == 1) `Placeholder`\n    double `alpha0` = `conditionedNormSqr0` / `updateDirection0`.dot(`aTimesUpdate0`);\n    `previousConditionedNormSqr0` = `conditionedNormSqr0`;\n}",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:input:`maxError0`=double",
    "sm:input:`conditionedNormSqr0`=double",
    "sm:input:`updateDirection0`=org.apache.mahout.math.Vector",
    "sm:import:org.apache.mahout.math.DenseVector,1",
    "sm:depth:9",
    "sm:input:`preconditioner0`=org.apache.mahout.math.solver.Preconditioner",
    "sm:hc:820f89c3",
    "sm:input:`ITERATIONS`=int",
    "sm:import:org.apache.mahout.math.Vector,1",
    "sm:input:`aTimesUpdate0`=org.apache.mahout.math.Vector",
    "sm:import:org.apache.mahout.math.function.Functions,1",
    "sm:input:`maxIterations0`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/apache/mahout/math/src/main/java/org/apache/mahout/math/solver/ConjugateGradientSolver.java",
    "sm:import:org.apache.mahout.math.CardinalityException,1",
    "sm:import:org.apache.mahout.math.function.PlusMult,1",
    "sm:order:41",
    "sm:input:`residualNormSquared`=double",
    "sm:import:org.slf4j.Logger,1",
    "sm:input:`previousConditionedNormSqr0`=double",
    "sm:import:org.apache.mahout.math.VectorIterable,1"
  ]
],[
  20443,
  "return `statement`(`base0`);",
  0,
  [
    "sm:depth:3",
    "sm:import:org.junit.runners.model.Statement,1",
    "sm:import:org.junit.runner.Description,1",
    "sm:input:`statement`=org.junit.runners.model.Statement(org.junit.runners.model.Statement)",
    "sm:input:`base0`=org.junit.runners.model.Statement",
    "sm:order:4",
    "sm:src:/home/alex/bachelor/eval2/repos/junit-team/junit4/src/main/java/org/junit/rules/ExternalResource.java",
    "sm:hc:2ca7a990"
  ]
],[
  487386,
  "String `name0` = `decodeName`(`in0`);\nint `endOffset0` = `in0`.writerIndex();\nif (`endOffset0` - `startOffset0` < 10) `Placeholder`\nreturn `record0`;\n",
  0,
  [
    "sm:hc:a34abab4",
    "sm:input:`decodeName`=java.lang.String(io.netty.buffer.ByteBuf)",
    "sm:input:`startOffset0`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/AsyncHttpClient/async-http-client/netty-bp/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java",
    "sm:input:`record0`=T",
    "sm:import:io.netty.util.CharsetUtil,1",
    "sm:import:io.netty.buffer.ByteBuf,1",
    "sm:output:`name0`=java.lang.String",
    "sm:input:`in0`=io.netty.buffer.ByteBuf",
    "sm:import:io.netty.handler.codec.CorruptedFrameException,1",
    "sm:depth:6",
    "sm:output:`endOffset0`=int",
    "sm:order:26"
  ]
],[
  683992,
  "if (`isUpdated0` && !`reporter0`.getCompletedJobIds().contains(`jobIDStr0`)) {\n    Event<DAGNode<? extends Job>> `event0` = null;\n    if (`jobProgress`.isComplete()) {\n        if (`reducers0` == 0) `Placeholder`\n        `job0`.setConfiguration(((HiveConf) `conf0`).getAllProperties());\n        `job0`.setCounterGroupMap(AmbroseHiveUtil.counterGroupInfoMap(`counterValues0`));\n    }\n    `reporter0`.pushEvent(`queryId0`, `event0`);\n}",
  0,
  [
    "sm:import:org.apache.hadoop.mapred.JobID,1",
    "sm:import:java.io.IOException,1",
    "sm:import:com.twitter.ambrose.model.DAGNode,1",
    "sm:import:com.twitter.ambrose.model.Job,1",
    "sm:import:org.apache.hadoop.mapred.JobClient,1",
    "sm:import:org.apache.hadoop.conf.Configuration,1",
    "sm:input:`queryId0`=java.lang.String",
    "sm:import:org.apache.hadoop.mapred.RunningJob,1",
    "sm:import:com.twitter.ambrose.model.Event.WorkflowProgressField,1",
    "sm:import:org.apache.hadoop.mapred.JobConf,1",
    "sm:order:53",
    "sm:depth:12",
    "sm:input:`isUpdated0`=boolean",
    "sm:import:org.apache.commons.logging.Log,1",
    "sm:input:`jobProgress`=com.twitter.ambrose.model.hadoop.MapReduceJobState",
    "sm:input:`reporter0`=com.twitter.ambrose.hive.reporter.EmbeddedAmbroseHiveProgressReporter",
    "sm:import:org.apache.hadoop.hive.ql.stats.ClientStatsPublisher,1",
    "sm:input:`counterValues0`=java.util.Map<java.lang.String,java.lang.Double>",
    "sm:import:org.apache.hadoop.hive.conf.HiveConf,1",
    "sm:input:`conf0`=org.apache.hadoop.conf.Configuration",
    "sm:import:java.util.Map,1",
    "sm:import:com.twitter.ambrose.model.hadoop.MapReduceJobState,1",
    "sm:import:org.apache.commons.logging.LogFactory,1",
    "sm:input:`job0`=com.twitter.ambrose.hive.HiveJob",
    "sm:import:com.google.common.collect.Maps,1",
    "sm:hc:4f874da9",
    "sm:import:org.apache.hadoop.hive.ql.session.SessionState,1",
    "sm:src:/home/alex/bachelor/eval2/repos/twitter/ambrose/hive/src/main/java/com/twitter/ambrose/hive/AmbroseHiveStatPublisher.java",
    "sm:import:com.twitter.ambrose.hive.reporter.AmbroseHiveReporterFactory.getEmbeddedProgressReporter,1",
    "sm:input:`jobIDStr0`=java.lang.String",
    "sm:import:com.twitter.ambrose.hive.reporter.EmbeddedAmbroseHiveProgressReporter,1",
    "sm:input:`reducers0`=int",
    "sm:import:com.twitter.ambrose.model.Event,1"
  ]
],[
  307193,
  "List<Object> `list0` = new ArrayList<>();\nwhile (`reader0`.hasNext()) `Placeholder`\n`reader0`.endArray();\n",
  0,
  [
    "sm:import:java.util.ArrayList,1",
    "sm:import:java.lang.annotation.Annotation,1",
    "sm:import:java.io.IOException,1",
    "sm:src:/home/alex/bachelor/eval2/repos/square/moshi/moshi/src/main/java/com/squareup/moshi/ArrayJsonAdapter.java",
    "sm:import:java.util.Set,1",
    "sm:output:`list0`=java.util.List<java.lang.Object>",
    "sm:import:java.lang.reflect.Type,1",
    "sm:order:17",
    "sm:input:`reader0`=com.squareup.moshi.JsonReader",
    "sm:depth:6",
    "sm:import:java.lang.reflect.Array,1",
    "sm:import:java.util.List,1",
    "sm:hc:bc70d65e"
  ]
],[
  643029,
  "try {\n    PrintWriter `out0` = new PrintWriter(new FileOutputStream(`tmpFile0`));\n    `out0`.println(\"bar\");\n    assertThat(`compiler.sourceFileNames`).isEqualTo(`expected0`);\n} finally {\n    `tmpFile0`.delete();\n}",
  1,
  [
    "sm:import:java.io.FileOutputStream,2",
    "sm:import:com.squareup.wire.schema.ProtoType,2",
    "sm:input:`expected0`=java.util.List<java.lang.String>",
    "sm:import:java.util.List,2",
    "sm:depth:9",
    "sm:import:java.util.ArrayList,2",
    "sm:src:/home/alex/bachelor/eval2/repos/square/wire/wire-compiler/src/test/java/com/squareup/wire/CommandLineOptionsTest.java",
    "sm:import:org.junit.Test,2",
    "sm:hc:49db61fb",
    "sm:input:`compiler.sourceFileNames`=java.util.List<java.lang.String>",
    "sm:import:java.io.File,2",
    "sm:import:org.assertj.core.api.Assertions.assertThat,2",
    "sm:import:org.junit.Assert.fail,2",
    "sm:order:31",
    "sm:import:java.io.PrintWriter,2",
    "sm:input:`tmpFile0`=java.io.File"
  ]
],[
  45012,
  "try {\n    if (Object.class.equals(`method0`.getDeclaringClass())) `Placeholder`\n    if (`EXECUTE_METHODS`.contains(`method0`.getName())) `Placeholder` else if (\"getResultSet\".equals(`method0`.getName())) `Placeholder`\n}catch (Throwable `t0`) {\n    throw ExceptionUtil.unwrapThrowable(`t0`);\n}",
  0,
  [
    "sm:import:java.lang.reflect.InvocationHandler,1",
    "sm:import:java.sql.Statement,1",
    "sm:input:`EXECUTE_METHODS`=java.util.Set<java.lang.String>",
    "sm:import:java.sql.ResultSet,1",
    "sm:import:org.apache.ibatis.logging.Log,1",
    "sm:import:java.lang.reflect.Proxy,1",
    "sm:import:java.lang.reflect.Method,1",
    "sm:depth:8",
    "sm:order:39",
    "sm:src:/home/alex/bachelor/eval2/repos/mybatis/mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java",
    "sm:import:org.apache.ibatis.reflection.ExceptionUtil,1",
    "sm:hc:e494869a",
    "sm:input:`method0`=java.lang.reflect.Method"
  ]
],[
  675795,
  "ScriptService `scriptService0` = null;\nMongoDBRiverDefinition `definition0` = MongoDBRiverDefinition.parseSettings(`riverName0`.name(), `RiverIndexName.Conf.DEFAULT_INDEX_NAME`, `riverSettings0`, `scriptService0`);\nAssert.assertNotNull(`definition0`);\nAssert.assertTrue(`definition0`.isSkipInitialImport());\n",
  0,
  [
    "sm:output:`definition0`=org.elasticsearch.river.mongodb.MongoDBRiverDefinition",
    "sm:input:`riverSettings0`=org.elasticsearch.river.RiverSettings",
    "sm:import:java.io.InputStream,1",
    "sm:import:org.elasticsearch.common.settings.ImmutableSettings,1",
    "sm:import:com.mongodb.util.JSON,1",
    "sm:import:org.elasticsearch.river.RiverSettings,1",
    "sm:import:org.elasticsearch.common.io.Streams,1",
    "sm:import:org.testng.annotations.Test,1",
    "sm:import:org.elasticsearch.river.RiverName,1",
    "sm:import:org.elasticsearch.script.ScriptService,1",
    "sm:hc:4a1b0fec",
    "sm:import:org.elasticsearch.river.RiverIndexName,1",
    "sm:import:org.elasticsearch.common.unit.TimeValue,1",
    "sm:input:`riverName0`=org.elasticsearch.river.RiverName",
    "sm:import:org.elasticsearch.common.unit.ByteSizeValue,1",
    "sm:depth:7",
    "sm:import:com.mongodb.ServerAddress,1",
    "sm:import:org.elasticsearch.common.xcontent.XContentHelper,1",
    "sm:import:org.testng.Assert,1",
    "sm:output:`scriptService0`=org.elasticsearch.script.ScriptService",
    "sm:import:com.mongodb.BasicDBObject,1",
    "sm:src:/home/alex/bachelor/eval2/repos/richardwilly98/elasticsearch-river-mongodb/src/test/java/org/elasticsearch/river/mongodb/MongoDBRiverDefinitionTest.java",
    "sm:input:`RiverIndexName.Conf.DEFAULT_INDEX_NAME`=java.lang.String",
    "sm:order:33"
  ]
],[
  10232,
  "if (`type10` instanceof TupleType && `type20` instanceof TupleType) {\n    List<Type> `elems10` = ((TupleType) `type10`).eltTypes;\n    return true;\n}\nif (`type10` instanceof ListType && `type20` instanceof ListType) `Placeholder`\nreturn false;\n",
  1,
  [
    "sm:import:org.yinwang.pysonar.hash.MyHashMap,2",
    "sm:hc:13f9f621",
    "sm:order:35",
    "sm:input:`type10`=org.yinwang.pysonar.types.Type",
    "sm:import:org.jetbrains.annotations.NotNull,2",
    "sm:import:java.util,2",
    "sm:src:/home/alex/bachelor/eval2/repos/yinwang0/pysonar2/src/main/java/org/yinwang/pysonar/types/FunType.java",
    "sm:depth:11",
    "sm:import:org.yinwang.pysonar.ast.FunctionDef,2",
    "sm:import:org.yinwang.pysonar.Analyzer,2",
    "sm:import:org.jetbrains.annotations.Nullable,2",
    "sm:input:`type20`=org.yinwang.pysonar.types.Type",
    "sm:import:org.yinwang.pysonar.State,2",
    "sm:import:org.yinwang.pysonar.TypeStack,2"
  ]
],[
  331728,
  "synchronized (this) {\n    `classPool` = new ClassPool();\n    ClassLoader[] `classLoaders0` = `getConfiguration`().getClassLoaders();\n    if (`classLoaders0` == null) `Placeholder`\n}",
  0,
  [
    "sm:input:`getConfiguration`=org.reflections.Configuration()",
    "sm:order:24",
    "sm:hc:fece9fde",
    "sm:import:javassist.expr,1",
    "sm:depth:9",
    "sm:input:`classPool`=javassist.ClassPool",
    "sm:import:javassist.bytecode.MethodInfo,1",
    "sm:src:/home/alex/bachelor/eval2/repos/ronmamo/reflections/src/main/java/org/reflections/scanners/MemberUsageScanner.java",
    "sm:import:com.google.common.base.Joiner,1",
    "sm:import:org.reflections.ReflectionsException,1",
    "sm:import:org.reflections.util.ClasspathHelper,1",
    "sm:import:javassist,1"
  ]
],[
  487372,
  "if (`msg0` instanceof FullHttpRequest) {\n    QueryStringDecoder `queryDecoder0` = new QueryStringDecoder(`req0`.uri());\n    HttpResponse `res0` = new DefaultHttpResponse(HTTP_1_1, `HttpResponseStatus.BAD_REQUEST`);\n    `f0`.addListener(`ChannelFutureListener.CLOSE`);\n}",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:io.netty.channel.ChannelFuture,1",
    "sm:import:io.netty.handler.codec.http.HttpVersion.HTTP_1_1,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:io.netty.channel.ChannelInboundHandlerAdapter,1",
    "sm:import:io.netty.handler.codec.http.DefaultHttpResponse,1",
    "sm:input:`req0`=io.netty.handler.codec.http.FullHttpRequest",
    "sm:import:io.netty.handler.codec.http.HttpResponse,1",
    "sm:depth:9",
    "sm:import:io.netty.channel.ChannelFutureListener,1",
    "sm:input:`HttpResponseStatus.BAD_REQUEST`=io.netty.handler.codec.http.HttpResponseStatus",
    "sm:input:`ChannelFutureListener.CLOSE`=io.netty.channel.ChannelFutureListener",
    "sm:src:/home/alex/bachelor/eval2/repos/mrniko/netty-socketio/src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java",
    "sm:hc:8494fb8",
    "sm:input:`msg0`=java.lang.Object",
    "sm:import:io.netty.handler.codec.http.FullHttpRequest,1",
    "sm:import:io.netty.channel.ChannelHandlerContext,1",
    "sm:input:`f0`=io.netty.channel.ChannelFuture",
    "sm:import:io.netty.handler.codec.http.HttpResponseStatus,1",
    "sm:import:io.netty.handler.codec.http.QueryStringDecoder,1",
    "sm:import:io.netty.channel.Channel,1",
    "sm:import:io.netty.channel.ChannelHandler.Sharable,1",
    "sm:order:30"
  ]
],[
  563872,
  "assertThat(\"abc less than 2 times\", `testRegexFromTo0`, not(matchesTo(\"abc\")));\nassertThat(\"abc exactly 4 times\", `testRegexFromTo0`, matchesTo(\"abcabcabcabc\"));\nassertThat(\"abc more than 4 times\", `testRegexFromTo0`, not(matchesExactly(\"abcabcabcabcabc\")));\n",
  0,
  [
    "sm:input:`testRegexFromTo0`=ru.lanwen.verbalregex.VerbalExpression",
    "sm:import:ru.lanwen.verbalregex.matchers.EqualToRegexMatcher.equalToRegex,1",
    "sm:import:ru.lanwen.verbalregex.matchers.TestsExactMatcher.matchesExactly,1",
    "sm:hc:c460944c",
    "sm:src:/home/alex/bachelor/eval2/repos/VerbalExpressions/JavaVerbalExpressions/src/test/java/ru/lanwen/verbalregex/BasicFunctionalityUnitTest.java",
    "sm:order:29",
    "sm:import:org.junit.Assert,1",
    "sm:import:ru.lanwen.verbalregex.VerbalExpression.regex,1",
    "sm:import:java.util.List,1",
    "sm:import:org.junit.Test,1",
    "sm:depth:6",
    "sm:import:org.hamcrest.CoreMatchers,1",
    "sm:import:ru.lanwen.verbalregex.matchers.TestMatchMatcher.matchesTo,1"
  ]
],[
  132426,
  "HikariConfig `config0` = new HikariConfig();\n`config0`.setMetricRegistry(`metricRegistry0`);\n`config0`.setPoolName(\"test\");\ntry (HikariDataSource `ds0` = new HikariDataSource(`config0`)){\n    Histogram `histo0` = `metricRegistry0`.getHistograms(new MetricFilter()).values().iterator().next();\n    Assert.assertEquals(1, `histo0`.getCount());\n}\n",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/brettwooldridge/HikariCP/src/test/java/com/zaxxer/hikari/pool/TestMetrics.java",
    "sm:import:shaded.org.codehaus.plexus.interpolation.os.Os,1",
    "sm:import:java.sql.Connection,1",
    "sm:import:com.codahale.metrics.MetricFilter,1",
    "sm:import:com.codahale.metrics.health.HealthCheck.Result,1",
    "sm:import:com.zaxxer.hikari.util.UtilityElf,1",
    "sm:import:com.codahale.metrics.Metric,1",
    "sm:hc:f3fafe7d",
    "sm:import:com.zaxxer.hikari.metrics.MetricsTrackerFactory,1",
    "sm:import:com.codahale.metrics.Histogram,1",
    "sm:import:com.zaxxer.hikari.HikariDataSource,1",
    "sm:import:org.junit.Assume,1",
    "sm:import:com.codahale.metrics.Timer,1",
    "sm:import:com.zaxxer.hikari.metrics.dropwizard.CodahaleMetricsTrackerFactory,1",
    "sm:order:52",
    "sm:import:org.junit.Test,1",
    "sm:import:com.codahale.metrics.MetricRegistry,1",
    "sm:import:java.util.SortedMap,1",
    "sm:output:`config0`=com.zaxxer.hikari.HikariConfig",
    "sm:import:com.codahale.metrics.health.HealthCheckRegistry,1",
    "sm:depth:13",
    "sm:import:java.sql.SQLException,1",
    "sm:input:`metricRegistry0`=com.codahale.metrics.MetricRegistry",
    "sm:import:java.util.concurrent.TimeUnit,1",
    "sm:import:org.junit.Assert,1",
    "sm:import:com.zaxxer.hikari.HikariConfig,1"
  ]
],[
  487349,
  "Connector `connector0` = new SocketConnector();\n`connector0`.setPort(`port`);\n`handler0`.setHandlers(new Handler[]{`resourceHandler0`, new APIHandler(`workflowIndexReadService`, `statsReadService`), new DefaultHandler()});\n`server`.setStopAtShutdown(false);\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:input:`resourceHandler0`=org.mortbay.jetty.handler.ResourceHandler",
    "sm:import:java.io.IOException,1",
    "sm:import:com.twitter.ambrose.model.Job,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:org.mortbay.jetty.handler.ResourceHandler,1",
    "sm:input:`port`=int",
    "sm:input:`server`=org.mortbay.jetty.Server",
    "sm:order:33",
    "sm:import:org.mortbay.jetty.Server,1",
    "sm:import:com.google.common.base.Preconditions.checkNotNull,1",
    "sm:import:org.mortbay.jetty.handler.HandlerList,1",
    "sm:hc:df5e134",
    "sm:import:org.mortbay.jetty.Connector,1",
    "sm:input:`handler0`=org.mortbay.jetty.handler.HandlerList",
    "sm:input:`statsReadService`=com.twitter.ambrose.service.StatsReadService<com.twitter.ambrose.model.Job>",
    "sm:import:com.twitter.ambrose.service.WorkflowIndexReadService,1",
    "sm:output:`connector0`=org.mortbay.jetty.Connector",
    "sm:src:/home/alex/bachelor/eval2/repos/twitter/ambrose/common/src/main/java/com/twitter/ambrose/server/ScriptStatusServer.java",
    "sm:depth:7",
    "sm:import:java.net.URL,1",
    "sm:input:`workflowIndexReadService`=com.twitter.ambrose.service.WorkflowIndexReadService",
    "sm:import:java.net.ServerSocket,1",
    "sm:import:org.mortbay.jetty.bio.SocketConnector,1",
    "sm:import:com.twitter.ambrose.service.StatsReadService,1",
    "sm:import:org.mortbay.jetty.Handler,1",
    "sm:import:org.mortbay.jetty.handler.DefaultHandler,1"
  ]
],[
  689480,
  "int `result0` = `hashCode`;\nreturn `result0` != 0 ? `result0` : (`hashCode` = Arrays.hashCode(`data`));\n",
  0,
  [
    "sm:import:java.io.IOException,1",
    "sm:import:java.io.EOFException,1",
    "sm:input:`data`=byte[]",
    "sm:import:java.security.NoSuchAlgorithmException,1",
    "sm:import:java.io.Serializable,1",
    "sm:import:java.security.MessageDigest,1",
    "sm:import:java.nio.ByteBuffer,1",
    "sm:import:java.util.Arrays,1",
    "sm:src:/home/alex/bachelor/eval2/repos/square/okio/okio/src/main/java/okio/ByteString.java",
    "sm:input:`hashCode`=int",
    "sm:import:java.lang.reflect.Field,1",
    "sm:hc:facaf1e3",
    "sm:import:okio.Util.arrayRangeEquals,1",
    "sm:import:java.io.ObjectOutputStream,1",
    "sm:import:java.io.OutputStream,1",
    "sm:import:java.io.ObjectInputStream,1",
    "sm:output:`result0`=int",
    "sm:import:java.io.InputStream,1",
    "sm:depth:7",
    "sm:order:20",
    "sm:import:okio.Util.checkOffsetAndCount,1"
  ]
],[
  655280,
  "if (`startPlace0` == null) `Placeholder`\n`points`.add(`startPlace0`);\n`validateAzimuthValue`(`startHeading0`);\n`validateAzimuthValue`(`endHeading0`);\n",
  3,
  [
    "sm:import:java.util.List,4",
    "sm:import:java.util.Locale,4",
    "sm:input:`points`=java.util.List<com.graphhopper.util.shapes.GHPoint>",
    "sm:import:com.graphhopper.util.shapes.GHPoint,4",
    "sm:input:`startPlace0`=com.graphhopper.util.shapes.GHPoint",
    "sm:order:19",
    "sm:src:/home/alex/bachelor/eval2/repos/graphhopper/graphhopper/core/src/main/java/com/graphhopper/GHRequest.java",
    "sm:import:com.graphhopper.util.Helper,4",
    "sm:input:`startHeading0`=double",
    "sm:input:`endHeading0`=double",
    "sm:import:java.util.Collections,4",
    "sm:import:com.graphhopper.routing.util.HintsMap,4",
    "sm:depth:4",
    "sm:import:java.util.ArrayList,4",
    "sm:hc:1239f546",
    "sm:input:`validateAzimuthValue`=void(double)"
  ]
],[
  667567,
  "int `prevSize0` = `classes`.size();\nfor(String `p0` : `paths0`) {\n    File `file0` = new File(`p0`);\n    if (`file0`.isDirectory()) `Placeholder` else {\n        ZipEntry `e0` = `jis0`.getNextEntry();\n        while (`e0` != null) {\n            `addMatchingFile`(`e0`.getName(), `packagePath0`, `recursive0`);\n            `jis0`.closeEntry();\n            `e0` = `jis0`.getNextEntry();\n        }\n    }\n}\n",
  0,
  [
    "sm:hc:7ec4b579",
    "sm:input:`paths0`=java.lang.String[]",
    "sm:import:java.io.File,1",
    "sm:input:`classes`=java.util.Collection<java.lang.Class>",
    "sm:import:java.io.IOException,1",
    "sm:output:`prevSize0`=int",
    "sm:input:`recursive0`=boolean",
    "sm:import:java.util.Collection,1",
    "sm:import:java.io.FileInputStream,1",
    "sm:import:java.util.Arrays,1",
    "sm:depth:14",
    "sm:import:java.util.zip.ZipEntry,1",
    "sm:import:java.util.jar.JarInputStream,1",
    "sm:input:`addMatchingFile`=void(java.lang.String,java.lang.String,boolean)",
    "sm:input:`packagePath0`=java.lang.String",
    "sm:order:64",
    "sm:input:`jis0`=java.util.jar.JarInputStream",
    "sm:src:/home/alex/bachelor/eval2/repos/bytedeco/javacpp/src/main/java/org/bytedeco/javacpp/tools/ClassScanner.java"
  ]
],[
  524205,
  "super(`Sharded.DEFAULT_WEIGHT`);\n`this.db` = JedisURIHelper.getDBIndex(`uri0`);\n`this.sslParameters` = `sslParameters0`;\n`this.hostnameVerifier` = `hostnameVerifier0`;\n",
  0,
  [
    "sm:import:redis.clients.util.ShardInfo,1",
    "sm:import:java.net.URI,1",
    "sm:input:`this.sslParameters`=javax.net.ssl.SSLParameters",
    "sm:input:`Sharded.DEFAULT_WEIGHT`=int",
    "sm:import:redis.clients.util.Sharded,1",
    "sm:input:`this.hostnameVerifier`=javax.net.ssl.HostnameVerifier",
    "sm:import:javax.net.ssl.HostnameVerifier,1",
    "sm:depth:5",
    "sm:hc:d21dd512",
    "sm:input:`hostnameVerifier0`=javax.net.ssl.HostnameVerifier",
    "sm:src:/home/alex/bachelor/eval2/repos/xetorthio/jedis/src/main/java/redis/clients/jedis/JedisShardInfo.java",
    "sm:import:redis.clients.jedis.exceptions.InvalidURIException,1",
    "sm:input:`this.db`=int",
    "sm:import:javax.net.ssl.SSLSocketFactory,1",
    "sm:input:`uri0`=java.net.URI",
    "sm:order:20",
    "sm:import:javax.net.ssl.SSLParameters,1",
    "sm:input:`sslParameters0`=javax.net.ssl.SSLParameters",
    "sm:import:redis.clients.util.JedisURIHelper,1"
  ]
],[
  249772,
  "try {\n    if (null != `parent0` && null != `annotation0`) `Placeholder`\n    if (null != `parent0`) {\n        if (null != `clazz0`.getSuperclass() && `clazz0`.getSuperclass().equals(`parent0`)) `Placeholder`\n        continue;\n    }\n    `classes0`.add(`clazz0`);\n}catch (ClassNotFoundException `e0`) {\n    `LOGGER`.error(\"???????????jar???????????.class????\" + `e0`.getMessage());\n}",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/biezhi/blade/blade-kit/src/main/java/blade/kit/resource/AbstractClassReader.java",
    "sm:import:java.io.File,1",
    "sm:import:java.lang.annotation.Annotation,1",
    "sm:input:`parent0`=java.lang.Class<?>",
    "sm:import:java.io.IOException,1",
    "sm:import:java.util.Enumeration,1",
    "sm:import:blade.kit.Assert,1",
    "sm:depth:11",
    "sm:import:blade.kit.logging.Logger,1",
    "sm:input:`LOGGER`=blade.kit.logging.Logger",
    "sm:input:`annotation0`=java.lang.Class<? extends java.lang.annotation.Annotation>",
    "sm:input:`clazz0`=java.lang.Class<?>",
    "sm:order:54",
    "sm:import:java.io.FileFilter,1",
    "sm:import:java.net.URL,1",
    "sm:hc:586a5aaf",
    "sm:input:`classes0`=java.util.Set<java.lang.Class<?>>",
    "sm:import:java.util.Set,1",
    "sm:import:blade.kit.CollectionKit,1",
    "sm:import:blade.kit.logging.LoggerFactory,1",
    "sm:import:java.net.URLDecoder,1"
  ]
],[
  405407,
  "String `output0` = `fileTemplate`;\n`output0` = `output0`.replace(\"${topEndpointsTable}\", `topEndpointsTable`(`allOfTime0`, `lastWindow0`));\nWriter `out0` = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Flags.getInstance().getOutputHtmlFile())));\n`out0`.write(`output0`);\n`out0`.close();\n",
  0,
  [
    "sm:input:`lastWindow0`=com.oreilly.learningsparkexamples.java.logs.LogStatistics",
    "sm:import:com.google.common.io.Files,1",
    "sm:import:java.io,1",
    "sm:import:java.util.Map,1",
    "sm:src:/home/alex/bachelor/eval2/repos/databricks/learning-spark/src/main/java/com/oreilly/learningsparkexamples/java/logs/Renderer.java",
    "sm:order:43",
    "sm:hc:3321977a",
    "sm:import:scala.Tuple2,1",
    "sm:output:`output0`=java.lang.String",
    "sm:depth:10",
    "sm:output:`out0`=java.io.Writer",
    "sm:input:`topEndpointsTable`=java.lang.String(com.oreilly.learningsparkexamples.java.logs.LogStatistics,com.oreilly.learningsparkexamples.java.logs.LogStatistics)",
    "sm:import:com.google.common.base.Charsets,1",
    "sm:input:`allOfTime0`=com.oreilly.learningsparkexamples.java.logs.LogStatistics",
    "sm:input:`fileTemplate`=java.lang.String",
    "sm:import:java.util.List,1",
    "sm:import:scala.Tuple4,1"
  ]
],[
  307102,
  "Assert.notNull(`resourceLocation0`, \"Resource location must not be null\");\nif (`resourceLocation0`.startsWith(`CLASSPATH_URL_PREFIX`)) {\n    String `path0` = `resourceLocation0`.substring(`CLASSPATH_URL_PREFIX`.length());\n    String `description0` = \"class path resource [\" + `path0` + \"]\";\n    if (`url0` == null) `Placeholder`\n    return `getFile`(`url0`, `description0`);\n}\n",
  0,
  [
    "sm:input:`resourceLocation0`=java.lang.String",
    "sm:import:java.io.File,1",
    "sm:import:java.net.URI,1",
    "sm:import:java.net.MalformedURLException,1",
    "sm:order:44",
    "sm:input:`CLASSPATH_URL_PREFIX`=java.lang.String",
    "sm:input:`url0`=java.net.URL",
    "sm:depth:10",
    "sm:import:java.io.FileNotFoundException,1",
    "sm:hc:6700739f",
    "sm:src:/home/alex/bachelor/eval2/repos/perwendel/spark/src/main/java/spark/utils/ResourceUtils.java",
    "sm:import:java.net.URLConnection,1",
    "sm:input:`getFile`=java.io.File(java.net.URL,java.lang.String)",
    "sm:import:java.net.URISyntaxException,1",
    "sm:import:java.net.URL,1"
  ]
],[
  533146,
  "if (`spaceIndex0` == -1) {\n    for(Map.Entry<String,Command> `commandEntry0` : `knownCommands0`.entrySet()) {\n        Command `command0` = `commandEntry0`.getValue();\n        if (StringUtil.startsWithIgnoreCase(`name0`, `cmdLine0`)) `Placeholder`\n    }\n    Collections.sort(`completions0`, `String.CASE_INSENSITIVE_ORDER`);\n}\nString `commandName0` = `cmdLine0`.substring(0, `spaceIndex0`);\n",
  0,
  [
    "sm:input:`completions0`=java.util.ArrayList<java.lang.String>",
    "sm:hc:c238e3e3",
    "sm:import:org.bukkit.Server,1",
    "sm:output:`commandName0`=java.lang.String",
    "sm:input:`knownCommands0`=java.util.Map<java.lang.String,org.bukkit.command.Command>",
    "sm:import:java.util.Collection,1",
    "sm:depth:12",
    "sm:import:org.bukkit.util.Java15Compat.Arrays_copyOfRange,1",
    "sm:input:`spaceIndex0`=int",
    "sm:input:`cmdLine0`=java.lang.String",
    "sm:import:org.bukkit.command.defaults,1",
    "sm:import:java.util.Map,1",
    "sm:import:java.util.Iterator,1",
    "sm:import:java.util.regex.Pattern,1",
    "sm:import:org.apache.commons.lang.Validate,1",
    "sm:import:org.bukkit.util.StringUtil,1",
    "sm:src:/home/alex/bachelor/eval2/repos/Bukkit/Bukkit/src/main/java/org/bukkit/command/SimpleCommandMap.java",
    "sm:import:java.util.Collections,1",
    "sm:import:java.util.List,1",
    "sm:order:49",
    "sm:import:java.util.HashMap,1",
    "sm:import:java.util.ArrayList,1",
    "sm:input:`String.CASE_INSENSITIVE_ORDER`=java.util.Comparator",
    "sm:import:org.bukkit.entity.Player,1",
    "sm:input:`name0`=java.lang.String"
  ]
],[
  8087,
  "if (this == `duration0`) `Placeholder`\nReadableDuration `other0` = (ReadableDuration) `duration0`;\n",
  0,
  [
    "sm:import:org.joda.time.format.FormatUtils,1",
    "sm:import:org.joda.convert.ToString,1",
    "sm:input:`duration0`=java.lang.Object",
    "sm:src:/home/alex/bachelor/eval2/repos/JodaOrg/joda-time/src/main/java/org/joda/time/base/AbstractDuration.java",
    "sm:order:14",
    "sm:hc:1bf15df3",
    "sm:import:org.joda.time.ReadableInstant,1",
    "sm:import:org.joda.time.Period,1",
    "sm:import:org.joda.time.Duration,1",
    "sm:output:`other0`=org.joda.time.ReadableDuration",
    "sm:depth:6",
    "sm:import:org.joda.time.ReadableDuration,1"
  ]
],[
  290710,
  "StringBuffer `sb0` = new StringBuffer();\nif (`groupName0` != \"/\") {\n    `sb0`.append(\"|----\" + `node0`);\n    if (`data0` != null) `Placeholder`\n}\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:input:`node0`=java.lang.String",
    "sm:src:/home/alex/bachelor/eval2/repos/knightliao/disconf/disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/PrintZookeeperTree.java",
    "sm:import:org.apache.zookeeper.data.Stat,1",
    "sm:import:org.apache.commons.lang.StringUtils,1",
    "sm:output:`sb0`=java.lang.StringBuffer",
    "sm:input:`data0`=byte[]",
    "sm:input:`groupName0`=java.lang.String",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:org.apache.zookeeper.KeeperException,1",
    "sm:depth:8",
    "sm:order:26",
    "sm:import:java.util.List,1",
    "sm:import:java.nio.charset.Charset,1",
    "sm:hc:849c26e2"
  ]
],[
  315282,
  "verifyZeroInteractions(`target0`);\nFilter `filter0` = mock(Filter.class);\nwhen(`filter0`.execute(any(Order.class))).thenReturn(\"filter\");\n",
  0,
  [
    "sm:output:`filter0`=com.iluwatar.intercepting.filter.Filter",
    "sm:hc:8c031e39",
    "sm:src:/home/alex/bachelor/eval2/repos/iluwatar/java-design-patterns/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/FilterManagerTest.java",
    "sm:import:org.mockito.Mockito.times,1",
    "sm:import:org.mockito.Mockito.mock,1",
    "sm:order:25",
    "sm:input:`target0`=com.iluwatar.intercepting.filter.Target",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:import:org.junit.Test,1",
    "sm:import:org.mockito.Mockito.verifyZeroInteractions,1",
    "sm:depth:7",
    "sm:import:org.mockito.Mockito.verify,1",
    "sm:import:org.mockito.Matchers.any,1",
    "sm:import:org.mockito.Mockito.when,1"
  ]
],[
  597903,
  "`dbBackend`.get().shutdown();\nReplCoordinator `replCoordinatorInstance0` = `replCoord`.get();\n`replCoordinatorInstance0`.stopAsync();\n`replCoordinatorInstance0`.awaitTerminated();\n`shutdownExecutor`();\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:hc:1b695407",
    "sm:output:`replCoordinatorInstance0`=com.torodb.torod.mongodb.repl.ReplCoordinator",
    "sm:import:javax.inject.Singleton,1",
    "sm:import:com.torodb.torod.mongodb.repl.ReplCoordinator.ReplCoordinatorOwnerCallback,1",
    "sm:order:26",
    "sm:import:java.util.concurrent.TimeUnit,1",
    "sm:import:com.eightkdata.mongowp.server.wp.NettyMongoServer,1",
    "sm:import:com.torodb.torod.mongodb.repl.ReplCoordinator,1",
    "sm:input:`dbBackend`=com.google.inject.Provider<com.torodb.torod.core.backend.DbBackend>",
    "sm:input:`replCoord`=com.google.inject.Provider<com.torodb.torod.mongodb.repl.ReplCoordinator>",
    "sm:import:com.torodb.torod.core.Torod,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:javax.inject.Inject,1",
    "sm:src:/home/alex/bachelor/eval2/repos/torodb/torodb/torodb/src/main/java/com/torodb/Shutdowner.java",
    "sm:depth:6",
    "sm:input:`shutdownExecutor`=void()",
    "sm:import:java.util.List,1",
    "sm:import:java.util.concurrent.ExecutorService,1",
    "sm:import:com.torodb.torod.core.backend.DbBackend,1",
    "sm:import:com.google.inject.Provider,1"
  ]
],[
  503693,
  "`set0`.add(-98);\nassertEquals(-98, `keys0`[0]);\nassertEquals(0, `keys0`[1]);\n",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/greenrobot/essentials/java-essentials/src/test/java/org/greenrobot/essentials/collections/LongHashSetTest.java",
    "sm:order:22",
    "sm:hc:6160b999",
    "sm:import:java.util.Arrays,1",
    "sm:depth:5",
    "sm:input:`set0`=org.greenrobot.essentials.collections.LongHashSet",
    "sm:import:org.junit.Assert.assertTrue,1",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:import:org.junit.Test,1",
    "sm:import:org.junit.Assert.assertFalse,1",
    "sm:input:`keys0`=long[]",
    "sm:import:java.util.Random,1"
  ]
],[
  486367,
  "if (`healthCheckRegistry0` != null) {\n    if (`healthCheckRegistry0` instanceof String) `Placeholder`\n    if (!(`healthCheckRegistry0` instanceof HealthCheckRegistry)) `Placeholder`\n}",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:java.io.IOException,1",
    "sm:order:18",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:com.zaxxer.hikari.util.UtilityElf.getNullIfEmpty,1",
    "sm:import:java.util.concurrent.TimeUnit.MINUTES,1",
    "sm:import:java.io.InputStream,1",
    "sm:input:`healthCheckRegistry0`=java.lang.Object",
    "sm:import:com.zaxxer.hikari.metrics.MetricsTrackerFactory,1",
    "sm:hc:29c779ea",
    "sm:import:java.util.concurrent.ThreadFactory,1",
    "sm:import:javax.sql.DataSource,1",
    "sm:import:java.util.concurrent.TimeUnit.SECONDS,1",
    "sm:src:/home/alex/bachelor/eval2/repos/brettwooldridge/HikariCP/src/main/java/com/zaxxer/hikari/HikariConfig.java",
    "sm:import:java.util.concurrent.ScheduledThreadPoolExecutor,1",
    "sm:import:com.codahale.metrics.MetricRegistry,1",
    "sm:import:java.io.FileInputStream,1",
    "sm:import:java.lang.reflect.Modifier,1",
    "sm:import:com.codahale.metrics.health.HealthCheckRegistry,1",
    "sm:depth:8",
    "sm:import:java.util.Set,1",
    "sm:import:javax.naming.InitialContext,1",
    "sm:import:com.zaxxer.hikari.util.PropertyElf,1",
    "sm:import:java.util.TreeSet,1",
    "sm:import:java.io.File,1",
    "sm:import:java.util.Properties,1",
    "sm:import:java.lang.reflect.Field,1",
    "sm:import:javax.naming.NamingException,1"
  ]
],[
  606391,
  "BlockingQueue<Object> `values0` = new LinkedBlockingQueue<Object>();\n`socket` = `client`();\n`socket`.connect();\nassertThat((String) `args0`[1], is(\"bar\"));\n",
  0,
  [
    "sm:import:org.junit.Assert.assertThat,1",
    "sm:import:io.socket.engineio.client.Transport,1",
    "sm:depth:6",
    "sm:import:io.socket.engineio.client.transports.Polling,1",
    "sm:src:/home/alex/bachelor/eval2/repos/socketio/socket.io-client-java/src/test/java/io/socket/client/ServerConnectionTest.java",
    "sm:import:java.util.concurrent.BlockingQueue,1",
    "sm:order:28",
    "sm:hc:90070fd5",
    "sm:import:io.socket.engineio.client.transports.WebSocket,1",
    "sm:import:io.socket.emitter.Emitter,1",
    "sm:import:org.junit.runner.RunWith,1",
    "sm:import:org.junit.Test,1",
    "sm:import:org.junit.runners.JUnit4,1",
    "sm:input:`args0`=java.lang.Object[]",
    "sm:import:java.net.URISyntaxException,1",
    "sm:output:`values0`=java.util.concurrent.BlockingQueue<java.lang.Object>",
    "sm:import:java.util.Map,1",
    "sm:import:java.util.Arrays,1",
    "sm:import:java.util.List,1",
    "sm:input:`client`=io.socket.client.Socket()",
    "sm:import:org.json.JSONObject,1",
    "sm:import:java.util.concurrent.LinkedBlockingQueue,1",
    "sm:input:`socket`=io.socket.client.Socket",
    "sm:import:org.hamcrest.CoreMatchers,1"
  ]
],[
  49019,
  "long `updateRate0` = -1;\nlong `count0` = 0;\nBufferedReader `in0` = new BufferedReader(new InputStreamReader(`System.in`));\n",
  1,
  [
    "sm:order:24",
    "sm:input:`System.in`=java.io.InputStream",
    "sm:output:`updateRate0`=long",
    "sm:src:/home/alex/bachelor/eval2/repos/addthis/stream-lib/src/main/java/com/clearspring/analytics/util/TopK.java",
    "sm:output:`in0`=java.io.BufferedReader",
    "sm:import:com.clearspring.analytics.stream.StreamSummary,1",
    "sm:import:java.io.IOException,2",
    "sm:import:com.clearspring.analytics.stream.cardinality.HyperLogLogPlus,1",
    "sm:import:java.io.BufferedReader,2",
    "sm:output:`count0`=long",
    "sm:depth:7",
    "sm:import:java.util.List,1",
    "sm:import:java.io.InputStreamReader,2",
    "sm:hc:c4fb5ae2",
    "sm:import:com.clearspring.analytics.stream.Counter,1"
  ]
],[
  571611,
  "if (`editText0` != null) {\n    `clicker`.clickOnScreen(`editText0`, false, 0);\n    if (!`successfull0`) `Placeholder`\n}",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/RobotiumTech/robotium/robotium-solo/src/main/java/com/robotium/solo/TextEnterer.java",
    "sm:input:`successfull0`=boolean",
    "sm:input:`editText0`=android.widget.EditText",
    "sm:import:junit.framework.Assert,1",
    "sm:import:android.text.InputType,1",
    "sm:hc:6dd15555",
    "sm:order:17",
    "sm:import:android.widget.EditText,1",
    "sm:input:`clicker`=com.robotium.solo.Clicker",
    "sm:import:android.app.Instrumentation,1",
    "sm:depth:6"
  ]
],[
  245618,
  "TestSuite `suite0` = new TestSuite(\"Framework Tests\");\n`suite0`.addTestSuite(TestCaseTest.class);\n`suite0`.addTestSuite(TestImplementorTest.class);\n`suite0`.addTestSuite(DoublePrecisionAssertTest.class);\nreturn `suite0`;\n",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/junit-team/junit4/src/test/java/junit/tests/framework/AllTests.java",
    "sm:import:junit.framework.TestSuite,1",
    "sm:hc:f770d08b",
    "sm:import:junit.framework.Test,1",
    "sm:depth:6",
    "sm:order:26",
    "sm:output:`suite0`=junit.framework.TestSuite"
  ]
],[
  663409,
  "if (`getHybiVersion`() < `MIN_HYBI_VERSION`) {\n    `res`.setHeader(`SEC_WEBSOCKET_VERSION`, String.valueOf(`MIN_HYBI_VERSION`));\n    return;\n}\nif (`key0` == null) `Placeholder`\n`res`.setStatus(new HttpResponseStatus(101, \"Switching Protocols\"));\n`res`.addHeader(UPGRADE, WEBSOCKET.toLowerCase());\n",
  0,
  [
    "sm:input:`getHybiVersion`=java.lang.Integer()",
    "sm:import:java.security.MessageDigest,1",
    "sm:import:org.jboss.netty.handler.codec.http.HttpHeaders.Names.CONNECTION,1",
    "sm:import:java.security.NoSuchAlgorithmException,1",
    "sm:input:`SEC_WEBSOCKET_VERSION`=java.lang.String",
    "sm:import:org.jboss.netty.channel.ChannelHandler,1",
    "sm:import:org.jboss.netty.handler.codec.http.HttpResponse,1",
    "sm:import:org.jboss.netty.handler.codec.http.HttpHeaders.Values.WEBSOCKET,1",
    "sm:input:`key0`=java.lang.String",
    "sm:import:org.webbitserver.helpers.Base64,1",
    "sm:import:org.jboss.netty.handler.codec.http.HttpResponseStatus,1",
    "sm:input:`res`=org.jboss.netty.handler.codec.http.HttpResponse",
    "sm:order:39",
    "sm:import:org.jboss.netty.handler.codec.http.HttpHeaders.Names.UPGRADE,1",
    "sm:import:org.jboss.netty.handler.codec.http.HttpRequest,1",
    "sm:depth:8",
    "sm:input:`MIN_HYBI_VERSION`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/webbit/webbit/src/main/java/org/webbitserver/netty/Hybi.java",
    "sm:import:java.nio.charset.Charset,1",
    "sm:hc:f1053bca"
  ]
],[
  384877,
  "throw new SQLFeatureNotSupportedException(\"setClob\");",
  2,
  [
    "sm:import:java.sql.Ref,3",
    "sm:import:java.sql.Date,3",
    "sm:import:java.io.Reader,3",
    "sm:import:java.sql.SQLFeatureNotSupportedException,3",
    "sm:order:4",
    "sm:import:java.sql.ResultSet,3",
    "sm:import:java.sql.SQLXML,3",
    "sm:import:java.sql.Time,3",
    "sm:import:java.sql.Blob,3",
    "sm:import:java.util.Calendar,3",
    "sm:import:java.sql.Clob,3",
    "sm:import:java.sql.SQLException,3",
    "sm:import:java.math.BigDecimal,3",
    "sm:import:java.sql.ResultSetMetaData,3",
    "sm:import:java.net.URL,3",
    "sm:import:java.sql.Timestamp,3",
    "sm:import:java.sql.PreparedStatement,3",
    "sm:import:java.sql.NClob,3",
    "sm:depth:3",
    "sm:src:/home/alex/bachelor/eval2/repos/prestodb/presto/presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoPreparedStatement.java",
    "sm:import:java.sql.Array,3",
    "sm:import:java.io.InputStream,3",
    "sm:import:java.sql.RowId,3",
    "sm:hc:7fadbc4f",
    "sm:import:java.sql.ParameterMetaData,3"
  ]
],[
  294752,
  "if (`masked` != null) `Placeholder`\nreturn `sb0`.toString();\n",
  1,
  [
    "sm:order:10",
    "sm:import:org.springframework.format.annotation.DateTimeFormat.ISO,1",
    "sm:import:java.util.Map,2",
    "sm:import:java.util.List,2",
    "sm:import:org.springframework.format.annotation.DateTimeFormat,1",
    "sm:input:`masked`=java.lang.String",
    "sm:input:`sb0`=java.lang.StringBuilder",
    "sm:hc:9b2f9947",
    "sm:depth:4",
    "sm:import:java.util.Date,1",
    "sm:src:/home/alex/bachelor/eval2/repos/spring-projects/spring-mvc-showcase/src/main/java/org/springframework/samples/mvc/convert/JavaBean.java"
  ]
],[
  204632,
  "Cache.Entry `entry0` = HttpHeaderParser.parseCacheHeaders(`response`);\n`assertEqualsWithin`(`entry.serverDate`, `now0`, `ONE_MINUTE_MILLIS`);\n",
  2,
  [
    "sm:order:16",
    "sm:import:java.util.Map,3",
    "sm:import:org.apache.http.Header,3",
    "sm:depth:6",
    "sm:src:/home/alex/bachelor/eval2/repos/mcxiaoke/android-volley/src/test/java/com/android/volley/toolbox/HttpHeaderParserTest.java",
    "sm:input:`assertEqualsWithin`=void(long,long,long)",
    "sm:import:java.util.Locale,3",
    "sm:import:org.apache.http.message.BasicHeader,3",
    "sm:import:org.junit.Test,3",
    "sm:input:`response`=com.android.volley.NetworkResponse",
    "sm:import:com.android.volley.NetworkResponse,3",
    "sm:import:org.robolectric.RobolectricTestRunner,3",
    "sm:input:`ONE_MINUTE_MILLIS`=long",
    "sm:import:java.text.DateFormat,3",
    "sm:hc:7c5bba37",
    "sm:input:`now0`=long",
    "sm:import:java.util.HashMap,3",
    "sm:input:`entry.serverDate`=long",
    "sm:import:com.android.volley.Cache,3",
    "sm:import:org.junit.runner.RunWith,3",
    "sm:import:java.util.Date,3",
    "sm:import:org.junit.Assert,3",
    "sm:import:org.junit.Before,3",
    "sm:output:`entry0`=com.android.volley.Cache.Entry",
    "sm:import:java.text.SimpleDateFormat,3"
  ]
],[
  282435,
  "while (`active` > 0) {\n    if (`fetched0`) {\n        if (!`more`) `Placeholder`\n        return `msg0`;\n    }\n    assert(!`more`);\n    if (`current` == `active`) `Placeholder`\n}\nreturn null;\n",
  0,
  [
    "sm:input:`more`=boolean",
    "sm:input:`fetched0`=boolean",
    "sm:import:java.util.ArrayList,1",
    "sm:input:`msg0`=zmq.Msg",
    "sm:depth:10",
    "sm:order:29",
    "sm:hc:1e0cca6c",
    "sm:input:`current`=int",
    "sm:import:java.util.Collections,1",
    "sm:import:java.util.List,1",
    "sm:input:`active`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/zeromq/jeromq/src/main/java/zmq/FQ.java"
  ]
],[
  155445,
  "`behavior`.setVariancePercent(0);\n`behavior`.setVariancePercent(40);\nfor(int `i1` = 0; `i1` < 100000; `i1`++) {\n    if (`delay0` > `upperBound0`) `Placeholder`\n    if (`delay0` < `lowerBound0`) `Placeholder`\n}\n",
  0,
  [
    "sm:input:`lowerBound0`=long",
    "sm:order:34",
    "sm:import:java.util.concurrent.TimeUnit.SECONDS,1",
    "sm:import:org.assertj.core.api.Assertions.assertThat,1",
    "sm:import:org.junit.Assert.fail,1",
    "sm:src:/home/alex/bachelor/eval2/repos/square/retrofit/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java",
    "sm:import:java.util.concurrent.TimeUnit.MILLISECONDS,1",
    "sm:input:`behavior`=retrofit2.mock.NetworkBehavior",
    "sm:input:`upperBound0`=long",
    "sm:import:org.junit.Test,1",
    "sm:depth:7",
    "sm:hc:1380511c",
    "sm:import:java.util.Random,1",
    "sm:input:`delay0`=long"
  ]
],[
  294693,
  "if (`pipe0` instanceof EdgesVerticesPipe) `Placeholder` else if (`pipe0` instanceof VerticesVerticesPipe) {\n    if (`queryPipe0`.getResultElementClass().equals(Vertex.class)) return false;\n    `queryPipe0`.setDirection(((VerticesVerticesPipe) `pipe0`).getDirection());\n} else if (`pipe0` instanceof VerticesEdgesPipe) `Placeholder` else if (`pipe0` instanceof PropertyFilterPipe) `Placeholder`",
  0,
  [
    "sm:import:com.tinkerpop.pipes.filter.PropertyFilterPipe,1",
    "sm:import:com.tinkerpop.pipes.transform.QueryPipe,1",
    "sm:input:`queryPipe0`=com.tinkerpop.pipes.transform.VertexQueryPipe",
    "sm:import:com.tinkerpop.pipes.IdentityPipe,1",
    "sm:import:com.tinkerpop.pipes.Pipe,1",
    "sm:hc:8e43b187",
    "sm:order:40",
    "sm:import:com.tinkerpop.pipes.transform.VerticesVerticesPipe,1",
    "sm:import:com.tinkerpop.pipes.transform.EdgesVerticesPipe,1",
    "sm:depth:10",
    "sm:import:com.tinkerpop.pipes.filter.IntervalFilterPipe,1",
    "sm:import:com.tinkerpop.pipes.util.FluentUtility,1",
    "sm:src:/home/alex/bachelor/eval2/repos/tinkerpop/gremlin/gremlin-java/src/main/java/com/tinkerpop/gremlin/java/GremlinFluentUtility.java",
    "sm:import:com.tinkerpop.blueprints.Vertex,1",
    "sm:input:`pipe0`=com.tinkerpop.pipes.Pipe",
    "sm:import:com.tinkerpop.pipes.transform.VerticesEdgesPipe,1",
    "sm:import:com.tinkerpop.pipes.filter.RangeFilterPipe,1",
    "sm:import:com.tinkerpop.blueprints.Edge,1",
    "sm:import:com.tinkerpop.pipes.transform.GraphQueryPipe,1",
    "sm:import:com.tinkerpop.pipes.transform.VertexQueryPipe,1"
  ]
],[
  282402,
  "int `contentLength0` = `size0` + `contentLengthHeaderValueSize0` + `HttpPostRequestTest.CONTENT_LENGTH`.length();\n`invokeServer`(`input0`);\nassertEquals(0, `this.testServer`.parms.size());\nassertEquals(1, `this.testServer`.files.size());\n",
  0,
  [
    "sm:import:java.io.BufferedReader,1",
    "sm:order:34",
    "sm:import:java.util.ArrayList,1",
    "sm:input:`contentLengthHeaderValueSize0`=int",
    "sm:import:java.io.IOException,1",
    "sm:input:`size0`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/NanoHttpd/nanohttpd/core/src/test/java/fi/iki/elonen/HttpPostRequestTest.java",
    "sm:depth:7",
    "sm:import:org.junit.Assert.fail,1",
    "sm:import:java.util.UUID,1",
    "sm:input:`this.testServer`=fi.iki.elonen.HttpServerTest.TestServer",
    "sm:hc:ad89b547",
    "sm:input:`HttpPostRequestTest.CONTENT_LENGTH`=java.lang.String",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:import:org.junit.Test,1",
    "sm:input:`invokeServer`=java.io.ByteArrayOutputStream(java.lang.String)",
    "sm:import:java.io.FileReader,1",
    "sm:import:java.util.List,1",
    "sm:output:`contentLength0`=int",
    "sm:input:`input0`=java.lang.String"
  ]
],[
  655845,
  "SecureRandom `random0` = SecureRandom.getInstance(\"SHA1PRNG\");\n`salt0` = new byte[8];\n`random0`.nextBytes(`salt0`);\n",
  0,
  [
    "sm:import:java.security.MessageDigest,1",
    "sm:import:javax.inject.Singleton,1",
    "sm:order:22",
    "sm:import:lombok.RequiredArgsConstructor,1",
    "sm:import:java.io.Serializable,1",
    "sm:import:java.security.NoSuchAlgorithmException,1",
    "sm:input:`salt0`=byte[]",
    "sm:import:javax.crypto.SecretKey,1",
    "sm:import:java.security.SecureRandom,1",
    "sm:import:javax.crypto.spec.PBEKeySpec,1",
    "sm:hc:3c9e4c88",
    "sm:output:`random0`=java.security.SecureRandom",
    "sm:import:javax.inject.Inject,1",
    "sm:import:lombok.extern.slf4j.Slf4j,1",
    "sm:depth:6",
    "sm:import:java.security.spec.KeySpec,1",
    "sm:import:org.apache.commons.lang3.StringUtils,1",
    "sm:src:/home/alex/bachelor/eval2/repos/Athou/commafeed/src/main/java/com/commafeed/backend/service/PasswordEncryptionService.java",
    "sm:import:javax.crypto.SecretKeyFactory,1"
  ]
],[
  102158,
  "`line0` = StringUtil.replaceXMLEntities(`line0`);\nif (`line0`.startsWith(NATIVE_CODE_START)) {\n    if (DEBUG_LOGGING_ASSEMBLY) `Placeholder`\n    if (`builder`.length() > 0) `Placeholder`\n} else if (`assemblyStarted`) {\n    boolean `couldBeNativeMethodMark0` = false;\n    `couldBeNativeMethodMark0` = `line0`.startsWith(NATIVE_CODE_METHOD_MARK);\n    if (`couldBeNativeMethodMark0`) {\n        `methodStarted` = true;\n        if (!`line0`.endsWith(S_APOSTROPHE)) {\n            if (DEBUG_LOGGING_ASSEMBLY) `Placeholder`\n            `methodInterrupted` = true;\n        }\n    }\n}\n`previousLine` = `line0`;\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.S_APOSTROPHE,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.MetaClass,1",
    "sm:src:/home/alex/bachelor/eval2/repos/AdoptOpenJDK/jitwatch/src/main/java/org/adoptopenjdk/jitwatch/core/AssemblyProcessor.java",
    "sm:input:`line0`=java.lang.String",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.S_HASH,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:order:69",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.NATIVE_CODE_METHOD_MARK,1",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.S_SPACE,1",
    "sm:input:`builder`=java.lang.StringBuilder",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.DEBUG_LOGGING_ASSEMBLY,1",
    "sm:input:`methodStarted`=boolean",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.S_NEWLINE,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.LogParseException,1",
    "sm:input:`methodInterrupted`=boolean",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.DEBUG_LOGGING,1",
    "sm:import:org.adoptopenjdk.jitwatch.util.StringUtil,1",
    "sm:input:`assemblyStarted`=boolean",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.NATIVE_CODE_START,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.IMetaMember,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.assembly.AssemblyUtil,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.PackageManager,1",
    "sm:input:`previousLine`=java.lang.String",
    "sm:depth:14",
    "sm:import:org.adoptopenjdk.jitwatch.model.MemberSignatureParts,1",
    "sm:import:org.adoptopenjdk.jitwatch.model.assembly.AssemblyMethod,1",
    "sm:hc:ad534269",
    "sm:import:org.adoptopenjdk.jitwatch.core.JITWatchConstants.C_NEWLINE,1"
  ]
],[
  560903,
  "StatementStats `stats0` = `results0`.getStats();\nif (`debug`) `Placeholder`\nif (`debug`) {\n    `out`.println(`cpuTimeSummary0`);\n    String `perNodeSummary0` = String.format(\"Per Node: %.1f parallelism, %5s rows/s, %8s\", `parallelism0` / `nodes0`, formatCountRate((double) `stats0`.getProcessedRows() / `nodes0`, `wallTime0`, false), formatDataRate(`bytes`(`stats0`.getProcessedBytes() / `nodes0`), `wallTime0`, true));\n}\n",
  0,
  [
    "sm:input:`debug`=boolean",
    "sm:import:com.facebook.presto.client.StatementClient,1",
    "sm:input:`parallelism0`=double",
    "sm:import:io.airlift.units.DataSize.Unit.BYTE,1",
    "sm:import:io.airlift.units.DataSize,1",
    "sm:input:`results0`=com.facebook.presto.client.QueryResults",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatTime,1",
    "sm:import:com.facebook.presto.cli.KeyReader.readKey,1",
    "sm:order:55",
    "sm:input:`wallTime0`=io.airlift.units.Duration",
    "sm:import:java.lang.Math.max,1",
    "sm:import:java.util.concurrent.TimeUnit.SECONDS,1",
    "sm:input:`out`=java.io.PrintStream",
    "sm:import:com.facebook.presto.client.QueryResults,1",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatCountRate,1",
    "sm:hc:ca25ee10",
    "sm:input:`bytes`=io.airlift.units.DataSize(long)",
    "sm:import:com.facebook.presto.client.StatementStats,1",
    "sm:input:`nodes0`=int",
    "sm:output:`stats0`=com.facebook.presto.client.StatementStats",
    "sm:import:com.google.common.primitives.Ints,1",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatDataRate,1",
    "sm:import:java.util.concurrent.TimeUnit.MILLISECONDS,1",
    "sm:import:java.io.PrintStream,1",
    "sm:import:java.lang.Character.toUpperCase,1",
    "sm:import:io.airlift.units.Duration,1",
    "sm:depth:13",
    "sm:src:/home/alex/bachelor/eval2/repos/prestodb/presto/presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatCount,1",
    "sm:input:`cpuTimeSummary0`=java.lang.String",
    "sm:import:io.airlift.log.Logger,1",
    "sm:import:com.google.common.base.Strings,1",
    "sm:import:java.util.concurrent.atomic.AtomicInteger,1",
    "sm:import:io.airlift.units.Duration.nanosSince,1",
    "sm:import:com.facebook.presto.cli.FormatUtils.pluralize,1",
    "sm:import:com.facebook.presto.client.StageStats,1",
    "sm:import:java.lang.Math.min,1",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatDataSize,1",
    "sm:import:com.facebook.presto.cli.FormatUtils.formatProgressBar,1"
  ]
],[
  184016,
  "`result0`.put(`firstNode0`.getLineNo(), `firstNode0`);\nwhile (`curNode0` != `lastNode0`) {\n    DetailAST `firstTokenOnLine0` = `result0`.get(`curNode0`.getLineNo());\n    if (`firstTokenOnLine0` == null || `expandedTabsColumnNo`(`firstTokenOnLine0`) >= `expandedTabsColumnNo`(`curNode0`)) `Placeholder`\n    `curNode0` = `getNextCurNode`(`curNode0`);\n}\n",
  0,
  [
    "sm:import:com.puppycrawl.tools.checkstyle.api.DetailAST,1",
    "sm:input:`getNextCurNode`=com.puppycrawl.tools.checkstyle.api.DetailAST(com.puppycrawl.tools.checkstyle.api.DetailAST)",
    "sm:input:`result0`=java.util.NavigableMap<java.lang.Integer,com.puppycrawl.tools.checkstyle.api.DetailAST>",
    "sm:input:`curNode0`=com.puppycrawl.tools.checkstyle.api.DetailAST",
    "sm:import:java.util.Collection,1",
    "sm:import:com.puppycrawl.tools.checkstyle.api.TokenTypes,1",
    "sm:input:`expandedTabsColumnNo`=int(com.puppycrawl.tools.checkstyle.api.DetailAST)",
    "sm:import:java.util.Iterator,1",
    "sm:hc:d444185e",
    "sm:depth:10",
    "sm:import:java.util.NavigableMap,1",
    "sm:order:45",
    "sm:import:java.util.TreeMap,1",
    "sm:input:`firstNode0`=com.puppycrawl.tools.checkstyle.api.DetailAST",
    "sm:import:com.puppycrawl.tools.checkstyle.utils.CommonUtils,1",
    "sm:input:`lastNode0`=com.puppycrawl.tools.checkstyle.api.DetailAST",
    "sm:src:/home/alex/bachelor/eval2/repos/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java"
  ]
],[
  341275,
  "if (`endSlot` != `other.endSlot`) `Placeholder`\nif (`startSlot` != `other.startSlot`) return false;\n",
  0,
  [
    "sm:input:`other.startSlot`=int",
    "sm:input:`other.endSlot`=int",
    "sm:hc:614beda6",
    "sm:input:`startSlot`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/mrniko/redisson/src/main/java/org/redisson/cluster/ClusterSlotRange.java",
    "sm:depth:4",
    "sm:input:`endSlot`=int",
    "sm:order:12"
  ]
],[
  198597,
  "assertThat(`xmlPath0`.getString(\"x:response.'x:container'.'x:item'[3].x:name\"), isEmptyOrNullString());\nassertThat(`xmlPath0`.getString(\"'x:response'.'x:container'.'x:item'[3].x:name\"), isEmptyOrNullString());\n",
  0,
  [
    "sm:import:org.junit.Assert.assertThat,1",
    "sm:import:org.hamcrest.Matchers.isEmptyOrNullString,1",
    "sm:hc:43853a1b",
    "sm:src:/home/alex/bachelor/eval2/repos/jayway/rest-assured/xml-path/src/test/java/com/jayway/restassured/path/xml/XmlPathNamespaceTest.java",
    "sm:depth:5",
    "sm:import:com.jayway.restassured.path.xml.config.XmlPathConfig.xmlPathConfig,1",
    "sm:import:org.junit.Test,1",
    "sm:input:`xmlPath0`=com.jayway.restassured.path.xml.XmlPath",
    "sm:import:org.hamcrest.Matchers.equalTo,1",
    "sm:order:19"
  ]
],[
  560773,
  "if (ASTHelpers.isJUnitTestCode(`state0`)) `Placeholder`\nif (`literal0` == null) `Placeholder`\nfor(Map.Entry<String,String> `entry0` : `PATH_TABLE`.entrySet()) {\n    String `hardCodedPath0` = `entry0`.getKey();\n    if (`remainderPath0`.isEmpty()) `Placeholder` else `Placeholder`\n}\nreturn `Description.NO_MATCH`;\n",
  0,
  [
    "sm:order:38",
    "sm:import:com.google.errorprone.BugPattern.SeverityLevel.WARNING,1",
    "sm:import:com.google.errorprone.bugpatterns.BugChecker.LiteralTreeMatcher,1",
    "sm:hc:178dff7f",
    "sm:input:`literal0`=java.lang.String",
    "sm:depth:9",
    "sm:input:`remainderPath0`=java.lang.String",
    "sm:input:`state0`=com.google.errorprone.VisitorState",
    "sm:import:com.google.errorprone.BugPattern.Category.ANDROID,1",
    "sm:import:com.google.errorprone.bugpatterns.BugChecker,1",
    "sm:import:com.sun.source.tree.LiteralTree,1",
    "sm:input:`PATH_TABLE`=com.google.common.collect.ImmutableMap<java.lang.String,java.lang.String>",
    "sm:import:com.google.errorprone.BugPattern,1",
    "sm:import:com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL,1",
    "sm:import:java.util.Map,1",
    "sm:import:com.google.errorprone.matchers.Description,1",
    "sm:import:com.google.errorprone.util.ASTHelpers,1",
    "sm:import:com.google.errorprone.fixes.SuggestedFix,1",
    "sm:import:com.google.common.collect.ImmutableMap,1",
    "sm:import:com.google.errorprone.VisitorState,1",
    "sm:import:com.sun.source.tree.Tree.Kind.STRING_LITERAL,1",
    "sm:input:`Description.NO_MATCH`=com.google.errorprone.matchers.Description",
    "sm:src:/home/alex/bachelor/eval2/repos/google/error-prone/core/src/main/java/com/google/errorprone/bugpatterns/android/HardCodedSdCardPath.java"
  ]
],[
  644299,
  "`set`.add(\"0\");\n`set`.add(\"3\");\nAssert.assertEquals(\"2\", `set`.last());\n",
  0,
  [
    "sm:hc:f1ae168",
    "sm:src:/home/alex/bachelor/eval2/repos/Athou/commafeed/src/test/java/com/commafeed/backend/FixedSizeSortedSetTest.java",
    "sm:depth:5",
    "sm:import:org.junit.Assert,1",
    "sm:import:org.apache.commons.lang3.ObjectUtils,1",
    "sm:import:org.junit.Test,1",
    "sm:import:java.util.Comparator,1",
    "sm:input:`set`=com.commafeed.backend.FixedSizeSortedSet<java.lang.String>",
    "sm:import:org.junit.Before,1",
    "sm:order:19"
  ]
],[
  556661,
  "`cMinute` = DateTimeComparator.getInstance(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.hourOfDay());\n`cDayOfWeek` = DateTimeComparator.getInstance(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.weekOfWeekyear());\n",
  0,
  [
    "sm:import:java.util.Comparator,1",
    "sm:import:java.util.ArrayList,1",
    "sm:input:`cMinute`=java.util.Comparator",
    "sm:import:junit.framework.TestSuite,1",
    "sm:import:java.lang.reflect.Modifier,1",
    "sm:import:junit.framework.TestCase,1",
    "sm:src:/home/alex/bachelor/eval2/repos/JodaOrg/joda-time/src/test/java/org/joda/time/TestDateTimeComparator.java",
    "sm:hc:9409a6be",
    "sm:import:java.io.ObjectOutputStream,1",
    "sm:order:25",
    "sm:input:`cDayOfWeek`=java.util.Comparator",
    "sm:import:java.util.Date,1",
    "sm:import:java.util.Collections,1",
    "sm:depth:6",
    "sm:import:java.io.ObjectInputStream,1",
    "sm:import:java.util.List,1",
    "sm:import:java.util.Calendar,1",
    "sm:import:java.io.ByteArrayOutputStream,1",
    "sm:import:org.joda.time.chrono.ISOChronology,1",
    "sm:import:java.io.ByteArrayInputStream,1"
  ]
],[
  396900,
  "int `i0` = `beginIndex0`;\nif (`i0` < `endIndex0`) {\n    `digit0` = Character.digit(`value0`.charAt(`i0`++), 10);\n    `result0` = -`digit0`;\n}\nwhile (`i0` < `endIndex0`) {\n    `result0` *= 10;\n    `result0` -= `digit0`;\n}\nreturn -`result0`;\n",
  0,
  [
    "sm:import:java.util.GregorianCalendar,1",
    "sm:input:`value0`=java.lang.String",
    "sm:import:java.util.Locale,1",
    "sm:import:java.util.TimeZone,1",
    "sm:input:`result0`=int",
    "sm:hc:8675975e",
    "sm:output:`i0`=int",
    "sm:depth:10",
    "sm:order:47",
    "sm:import:java.util.Date,1",
    "sm:input:`endIndex0`=int",
    "sm:input:`digit0`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/square/moshi/adapters/src/main/java/com/squareup/moshi/Iso8601Utils.java",
    "sm:import:java.util.Calendar,1",
    "sm:input:`beginIndex0`=int"
  ]
],[
  124175,
  "float `Y_incl0` = 0.f;\nfloat `Y_excl0` = `distWeight0`;\nint `nobs_incl0` = 0;\nfor(float `aDist0` : `dist0`) {\n    `Y_excl0` -= `aDist0`;\n    `nobs_excl0`--;\n    float `newSplitValue0` = (`Y_incl0` * `Y_incl0` / (float) `nobs_incl0`) + (`Y_excl0` * `Y_excl0` / (float) `nobs_excl0`);\n}\n",
  0,
  [
    "sm:order:56",
    "sm:input:`nobs_excl0`=int",
    "sm:output:`Y_excl0`=float",
    "sm:src:/home/alex/bachelor/eval2/repos/h2oai/h2o-2/src/main/java/hex/singlenoderf/MSEStatistic.java",
    "sm:import:water.util.Utils,1",
    "sm:input:`dist0`=float[]",
    "sm:depth:12",
    "sm:output:`Y_incl0`=float",
    "sm:output:`nobs_incl0`=int",
    "sm:import:java.util.Random,1",
    "sm:input:`distWeight0`=float",
    "sm:hc:a03f5963"
  ]
],[
  568919,
  "`exception`.expect(IllegalStateException.class);\n`exception`.expectMessage(equalTo(\"Expected response body to be verified as JSON, HTML or XML but content-type 'text/plain' is not supported out of the box.\\n\" + \"Try registering a custom parser using:\\n\" + \"   RestAssured.registerParser(\\\"text/plain\\\", <parser type>);\\n\" + \"Content was:\\n\" + \"An expected error occurred\\n\"));\n",
  0,
  [
    "sm:import:com.jayway.restassured.RestAssured,1",
    "sm:import:com.jayway.restassured.specification.ResponseSpecification,1",
    "sm:import:com.jayway.restassured.response.Response,1",
    "sm:import:com.jayway.restassured.http.ContentType,1",
    "sm:import:org.junit.Assert.assertThat,1",
    "sm:order:18",
    "sm:input:`exception`=org.junit.rules.ExpectedException",
    "sm:import:java.util.Arrays.asList,1",
    "sm:import:org.hamcrest.Matchers,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jayway/rest-assured/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java",
    "sm:import:java.util,1",
    "sm:import:com.jayway.restassured.itest.java.support.WithJetty,1",
    "sm:import:org.junit.Test,1",
    "sm:hc:40094d0c",
    "sm:import:com.jayway.restassured.parsing.Parser.JSON,1",
    "sm:depth:6",
    "sm:import:groovy.json.JsonException,1",
    "sm:import:java.lang.String.format,1",
    "sm:import:com.jayway.restassured.specification.RequestSpecification,1"
  ]
],[
  208467,
  "if (!`mPeopleCache`.containsKey(`address0`)) {\n    PersonRecord `record0`;\n    if (`c0` != null && `c0`.moveToFirst()) {\n        long `id0` = `c0`.getLong(`c0`.getColumnIndex(`PHONE_PROJECTION`[0]));\n        String `number0` = `NEW_CONTACT_API` ? `address0` : `c0`.getString(`c0`.getColumnIndex(`PHONE_PROJECTION`[2]));\n    } else `Placeholder`\n    if (`c0` != null) `Placeholder`\n}",
  0,
  [
    "sm:import:java.util.Locale,1",
    "sm:order:60",
    "sm:import:android.content.ContentResolver,1",
    "sm:import:android.annotation.TargetApi,1",
    "sm:input:`c0`=android.database.Cursor",
    "sm:import:com.zegoggles.smssync.mail.MessageConverter.ECLAIR_CONTENT_URI,1",
    "sm:import:org.jetbrains.annotations.NotNull,1",
    "sm:import:android.database.Cursor,1",
    "sm:import:java.util.LinkedHashMap,1",
    "sm:input:`NEW_CONTACT_API`=boolean",
    "sm:import:android.os.Build,1",
    "sm:import:android.net.Uri,1",
    "sm:input:`mPeopleCache`=java.util.Map<java.lang.String,com.zegoggles.smssync.mail.PersonRecord>",
    "sm:import:com.zegoggles.smssync.App.TAG,1",
    "sm:import:java.util.Map,1",
    "sm:import:android.text.TextUtils,1",
    "sm:input:`address0`=java.lang.String",
    "sm:import:android.util.Log,1",
    "sm:depth:14",
    "sm:input:`PHONE_PROJECTION`=java.lang.String[]",
    "sm:import:android.provider.ContactsContract,1",
    "sm:import:com.zegoggles.smssync.App.LOCAL_LOGV,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jberkel/sms-backup-plus/src/main/java/com/zegoggles/smssync/mail/PersonLookup.java",
    "sm:hc:8d32692d"
  ]
],[
  183565,
  "JmxConnectionProvider `server0` = mock(JmxConnectionProvider.class);\nwhen(`server0`.isLocal()).thenReturn(false);\nwhen(`jmxConnector0`.getMBeanServerConnection()).thenReturn(`mBeanServerConnection0`);\n",
  0,
  [
    "sm:input:`jmxConnector0`=javax.management.remote.JMXConnector",
    "sm:import:javax.management.MBeanServer,1",
    "sm:import:java.io.IOException,1",
    "sm:import:javax.management.MBeanServerConnection,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jmxtrans/jmxtrans/jmxtrans-core/src/test/java/com/googlecode/jmxtrans/connections/MBeanServerConnectionFactoryTest.java",
    "sm:order:27",
    "sm:import:org.assertj.core.api.Assertions.assertThat,1",
    "sm:import:org.mockito.Mockito.mock,1",
    "sm:import:javax.management.remote.JMXConnector,1",
    "sm:hc:ca94021f",
    "sm:import:org.junit.Test,1",
    "sm:input:`mBeanServerConnection0`=javax.management.MBeanServerConnection",
    "sm:depth:6",
    "sm:import:org.mockito.Mockito.verify,1",
    "sm:output:`server0`=com.googlecode.jmxtrans.connections.JmxConnectionProvider",
    "sm:import:org.mockito.Mockito.when,1"
  ]
],[
  474701,
  "String `jsonString0` = \"[\\\"foo\\\",\\\"bar\\\"]\";\nJsonArray `array0` = new JsonArray(`jsonString0`);\n",
  0,
  [
    "sm:order:15",
    "sm:output:`array0`=io.vertx.core.json.JsonArray",
    "sm:import:io.vertx.docgen.Source,1",
    "sm:import:io.vertx.core.json.JsonArray,1",
    "sm:import:io.vertx.core.json.JsonObject,1",
    "sm:output:`jsonString0`=java.lang.String",
    "sm:hc:5ecc305c",
    "sm:depth:6",
    "sm:src:/home/alex/bachelor/eval2/repos/eclipse/vert.x/src/main/java/docoverride/json/Examples.java"
  ]
],[
  52796,
  "if (`dictionary` != null) `Placeholder`\nbyte[] `unpacked0` = new byte[`unpackedSize0`];\nif (`CC.ASSERT` && !(`in2.pos` == `unpackedSize0`)) `Placeholder`\n",
  0,
  [
    "sm:import:java.util.zip.Inflater,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jankotek/mapdb/src/main/java/org/mapdb/serializer/SerializerCompressionDeflateWrapper.java",
    "sm:import:java.io.IOException,1",
    "sm:input:`dictionary`=byte[]",
    "sm:import:java.io.Serializable,1",
    "sm:input:`unpackedSize0`=int",
    "sm:import:java.util.Arrays,1",
    "sm:depth:7",
    "sm:import:java.util.zip.Deflater,1",
    "sm:input:`in2.pos`=int",
    "sm:input:`CC.ASSERT`=boolean",
    "sm:order:25",
    "sm:hc:1a4412fc",
    "sm:output:`unpacked0`=byte[]",
    "sm:import:java.util.zip.InflaterInputStream,1",
    "sm:import:org.mapdb,1",
    "sm:import:java.util.Comparator,1"
  ]
],[
  568886,
  "while (true) {\n    int `c0` = `in0`.read();\n    if (`c0` == -1) `Placeholder` else `Placeholder`\n}\nint `length0` = `result0`.length();\nif (`length0` > 0 && `result0`.charAt(`length0` - 1) == '\\r') `Placeholder`\n",
  0,
  [
    "sm:input:`in0`=java.io.InputStream",
    "sm:import:java.io.IOException,1",
    "sm:import:java.io.EOFException,1",
    "sm:hc:79830bd8",
    "sm:depth:9",
    "sm:import:org.junit.Assert.fail,1",
    "sm:src:/home/alex/bachelor/eval2/repos/JakeWharton/DiskLruCache/src/test/java/com/jakewharton/disklrucache/StrictLineReaderTest.java",
    "sm:input:`result0`=java.lang.StringBuilder",
    "sm:import:java.io.InputStream,1",
    "sm:import:org.junit.Test,1",
    "sm:order:42",
    "sm:output:`length0`=int",
    "sm:import:java.io.ByteArrayInputStream,1"
  ]
],[
  376369,
  "JsonWriter `jsonWriter0` = JsonWriter.of(`buffer0`);\n`jsonWriter0`.value(-0.5);\n",
  0,
  [
    "sm:output:`jsonWriter0`=com.squareup.moshi.JsonWriter",
    "sm:order:16",
    "sm:import:java.io.IOException,1",
    "sm:hc:1fb31a5",
    "sm:import:okio.Buffer,1",
    "sm:import:org.assertj.core.api.Assertions.assertThat,1",
    "sm:import:org.junit.Assert.fail,1",
    "sm:input:`buffer0`=okio.Buffer",
    "sm:src:/home/alex/bachelor/eval2/repos/square/moshi/moshi/src/test/java/com/squareup/moshi/BufferedSinkJsonWriterTest.java",
    "sm:import:java.math.BigInteger,1",
    "sm:import:org.junit.Test,1",
    "sm:depth:6",
    "sm:import:java.math.BigDecimal,1"
  ]
],[
  73250,
  "TestMessageListener `listener0` = new TestMessageListener(\"foo\", \"bar\".getBytes());\nPluginMessageListenerRegistration `registration0` = `messenger0`.registerIncomingPluginChannel(`plugin0`, \"foo\", `listener0`);\n`listener0`.reset();\n",
  0,
  [
    "sm:input:`plugin0`=org.bukkit.plugin.TestPlugin",
    "sm:hc:43e9196d",
    "sm:input:`messenger0`=org.bukkit.plugin.messaging.Messenger",
    "sm:output:`listener0`=org.bukkit.plugin.messaging.TestMessageListener",
    "sm:import:org.bukkit.plugin.TestPlugin,1",
    "sm:import:java.util.Collection,1",
    "sm:import:org.bukkit.entity.Player,1",
    "sm:output:`registration0`=org.bukkit.plugin.messaging.PluginMessageListenerRegistration",
    "sm:import:org.junit.Assert,1",
    "sm:src:/home/alex/bachelor/eval2/repos/Bukkit/Bukkit/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java",
    "sm:import:org.junit.Test,1",
    "sm:order:27",
    "sm:depth:7",
    "sm:import:org.hamcrest.CoreMatchers,1"
  ]
],[
  368160,
  "Connection `connection0` = `database`.getConnection();\nStringBuilder `stringBuilder0` = new StringBuilder(\"insert into \\\"test_table\\\" values \");\n`cols`.add(new JdbcColumnHandle(\"test_id\", \"col_2\", `BooleanType.BOOLEAN`));\n",
  0,
  [
    "sm:input:`database`=com.facebook.presto.plugin.jdbc.TestingDatabase",
    "sm:import:org.testng.annotations.BeforeMethod,1",
    "sm:import:org.testng.Assert.assertEquals,1",
    "sm:import:java.sql.Connection,1",
    "sm:import:java.sql.ResultSet,1",
    "sm:import:com.google.common.collect.ImmutableList,1",
    "sm:import:com.facebook.presto.spi.type.DoubleType,1",
    "sm:input:`BooleanType.BOOLEAN`=com.facebook.presto.spi.type.BooleanType",
    "sm:depth:6",
    "sm:import:org.testng.annotations.AfterMethod,1",
    "sm:import:com.facebook.presto.spi.predicate.Domain,1",
    "sm:import:com.facebook.presto.spi.predicate.SortedRangeSet,1",
    "sm:import:java.sql.PreparedStatement,1",
    "sm:src:/home/alex/bachelor/eval2/repos/prestodb/presto/presto-base-jdbc/src/test/java/com/facebook/presto/plugin/jdbc/TestJdbcQueryBuilder.java",
    "sm:import:org.testng.annotations.Test,1",
    "sm:import:com.facebook.presto.spi.predicate.Range,1",
    "sm:output:`stringBuilder0`=java.lang.StringBuilder",
    "sm:import:com.facebook.presto.spi.type.BigintType,1",
    "sm:import:com.facebook.presto.spi.predicate.TupleDomain,1",
    "sm:import:com.facebook.presto.spi.type.BooleanType,1",
    "sm:output:`connection0`=java.sql.Connection",
    "sm:hc:66679e10",
    "sm:import:com.google.common.collect.ImmutableSet,1",
    "sm:input:`cols`=java.util.List<com.facebook.presto.plugin.jdbc.JdbcColumnHandle>",
    "sm:import:java.util.List,1",
    "sm:import:com.facebook.presto.spi.ColumnHandle,1",
    "sm:import:java.sql.SQLException,1",
    "sm:import:com.google.common.collect.ImmutableMap,1",
    "sm:import:java.util.ArrayList,1",
    "sm:order:26"
  ]
],[
  458263,
  "DatagramPacket `packet0` = new DatagramPacket(`buffer0`, `buffer.length`);\n`socket0`.receive(`packet0`);\n`log`.debug(\"Message received: {}\", `messageReceived0`);\n",
  0,
  [
    "sm:import:org.junit.rules.ExternalResource,1",
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:java.io.IOException,1",
    "sm:input:`LOG`=org.slf4j.Logger",
    "sm:order:21",
    "sm:import:org.slf4j.Logger,1",
    "sm:depth:6",
    "sm:import:com.google.common.io.Closer,1",
    "sm:import:java.net.DatagramSocket,1",
    "sm:input:`messageReceived0`=java.lang.String",
    "sm:output:`packet0`=java.net.DatagramPacket",
    "sm:import:java.net.InetSocketAddress,1",
    "sm:import:java.net.DatagramPacket,1",
    "sm:import:com.google.common.base.Preconditions.checkState,1",
    "sm:import:javax.annotation.Nonnull,1",
    "sm:import:java.util.concurrent.ConcurrentLinkedQueue,1",
    "sm:src:/home/alex/bachelor/eval2/repos/jmxtrans/jmxtrans/jmxtrans-test-utils/src/main/java/com/googlecode/jmxtrans/test/UdpLoggingServer.java",
    "sm:import:javax.annotation.Nullable,1",
    "sm:import:java.nio.charset.Charset,1",
    "sm:hc:8013961f",
    "sm:input:`buffer0`=byte[]",
    "sm:input:`socket0`=java.net.DatagramSocket",
    "sm:input:`buffer.length`=int"
  ]
],[
  19986,
  "if (`label0`.isRepeated()) {\n    if (`valueElement0`.isJsonNull()) `Placeholder`\n    List<Object> `valueList0` = new ArrayList<>();\n    return `valueList0`;\n}",
  0,
  [
    "sm:import:com.google.gson.reflect.TypeToken,1",
    "sm:import:java.io.IOException,1",
    "sm:import:java.math.BigInteger,1",
    "sm:input:`label0`=com.squareup.wire.WireField.Label",
    "sm:import:com.google.gson.Gson,1",
    "sm:import:java.util.LinkedHashMap,1",
    "sm:import:com.google.gson.stream.JsonWriter,1",
    "sm:import:com.google.gson.JsonElement,1",
    "sm:order:20",
    "sm:import:com.google.gson.stream.JsonReader,1",
    "sm:import:com.google.gson.TypeAdapter,1",
    "sm:import:java.util.Map,1",
    "sm:import:com.squareup.wire.WireField.Label,1",
    "sm:import:java.util.Collections.unmodifiableMap,1",
    "sm:depth:8",
    "sm:import:java.util.Collections,1",
    "sm:import:java.util.List,1",
    "sm:import:com.google.gson.stream.JsonToken,1",
    "sm:import:java.util.ArrayList,1",
    "sm:src:/home/alex/bachelor/eval2/repos/square/wire/wire-gson-support/src/main/java/com/squareup/wire/MessageTypeAdapter.java",
    "sm:input:`valueElement0`=com.google.gson.JsonElement",
    "sm:import:java.lang.reflect.Type,1",
    "sm:hc:db44b042"
  ]
],[
  24075,
  "PowerMockito.doReturn(\"/public/index.html\").when(`resourceMock`).getPath();\nassertEquals(\"Should be equals because the resource exists\", `returnedPath0`, \"/public/index.html\");\nPowerMockito.verifyNew(ClassPathResource.class).withArguments(\"/public/index.html\");\n",
  0,
  [
    "sm:input:`resourceMock`=spark.resource.ClassPathResource",
    "sm:input:`returnedPath0`=java.lang.String",
    "sm:src:/home/alex/bachelor/eval2/repos/perwendel/spark/src/test/java/spark/resource/ClassPathResourceHandlerTest.java",
    "sm:import:java.io.IOException,1",
    "sm:import:org.powermock.api.mockito.PowerMockito,1",
    "sm:import:org.mockito.Mockito.times,1",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:depth:6",
    "sm:import:org.junit.Assert.assertNull,1",
    "sm:hc:8b84f3d3",
    "sm:import:org.mockito.Mockito.doReturn,1",
    "sm:order:25",
    "sm:import:org.junit.runner.RunWith,1",
    "sm:import:org.junit.Test,1",
    "sm:import:org.powermock.core.classloader.annotations.PrepareForTest,1",
    "sm:import:org.mockito.Mockito.mock,1",
    "sm:import:java.net.MalformedURLException,1",
    "sm:import:org.powermock.modules.junit4.PowerMockRunner,1",
    "sm:import:org.mockito.Mockito.verify,1",
    "sm:import:org.junit.Before,1",
    "sm:import:java.io.File,1",
    "sm:import:org.mockito.Mockito.doThrow,1"
  ]
],[
  445957,
  "assertTrue(`tableNames0`.get(0).getObjectName().equals(\"nation\"), \"Expected 'nation' table.\");\n`assertThatQueryReturnsValue`(\"INSERT INTO nation SELECT * FROM tpch.tiny.nation\", 25L);\n`assertThatQueryReturnsValue`(\"INSERT INTO nation SELECT * FROM tpch.tiny.nation\", 25L);\n`assertThatQueryReturnsValue`(\"SELECT count(*) FROM nation\", 0L);\n`assertThatQueryReturnsValue`(\"DROP TABLE nation\", true);\n",
  0,
  [
    "sm:import:com.facebook.presto.plugin.blackhole.BlackHoleConnector.SPLIT_COUNT_PROPERTY,1",
    "sm:import:org.testng.Assert.assertEquals,1",
    "sm:import:com.facebook.presto.metadata.QualifiedObjectName,1",
    "sm:import:java.lang.String.format,1",
    "sm:hc:afd66917",
    "sm:order:34",
    "sm:import:org.testng.Assert.fail,1",
    "sm:import:org.testng.annotations.Test,1",
    "sm:import:com.facebook.presto.plugin.blackhole.BlackHoleQueryRunner.createQueryRunner,1",
    "sm:import:com.google.common.collect.Iterables,1",
    "sm:import:org.testng.annotations.BeforeTest,1",
    "sm:import:com.facebook.presto.Session,1",
    "sm:import:com.facebook.presto.plugin.blackhole.BlackHoleConnector.FIELD_LENGTH_PROPERTY,1",
    "sm:import:com.facebook.presto.testing.MaterializedRow,1",
    "sm:import:org.testng.annotations.AfterTest,1",
    "sm:import:org.testng.Assert.assertTrue,1",
    "sm:import:com.facebook.presto.plugin.blackhole.BlackHoleConnector.PAGES_PER_SPLIT_PROPERTY,1",
    "sm:input:`tableNames0`=java.util.List<com.facebook.presto.metadata.QualifiedObjectName>",
    "sm:depth:7",
    "sm:import:com.facebook.presto.plugin.blackhole.BlackHoleConnector.ROWS_PER_PAGE_PROPERTY,1",
    "sm:import:java.util.List,1",
    "sm:import:com.facebook.presto.testing.TestingSession.testSessionBuilder,1",
    "sm:import:java.sql.SQLException,1",
    "sm:import:com.facebook.presto.testing.QueryRunner,1",
    "sm:src:/home/alex/bachelor/eval2/repos/prestodb/presto/presto-blackhole/src/test/java/com/facebook/presto/plugin/blackhole/TestBlackHoleSmoke.java",
    "sm:input:`assertThatQueryReturnsValue`=void(java.lang.String,java.lang.Object)",
    "sm:import:com.facebook.presto.testing.MaterializedResult,1"
  ]
],[
  261619,
  "int `newAllocatedBlockCount0` = `allocatedBlockCount` + `count0`;\nint `newBlocksNeeded0` = Math.max(`count0` - `blockCache`.blockCount(), 0);\nfor(int `i0` = 0; `i0` < `newBlocksNeeded0`; `i0`++) `Placeholder`\n",
  0,
  [
    "sm:input:`blockCache`=com.google.common.jimfs.RegularFile",
    "sm:order:35",
    "sm:import:java.io.IOException,1",
    "sm:import:java.math.RoundingMode,1",
    "sm:import:com.google.common.base.Preconditions.checkArgument,1",
    "sm:import:com.google.common.math.LongMath,1",
    "sm:output:`newAllocatedBlockCount0`=int",
    "sm:output:`newBlocksNeeded0`=int",
    "sm:input:`allocatedBlockCount`=int",
    "sm:depth:8",
    "sm:import:com.google.common.annotations.VisibleForTesting,1",
    "sm:src:/home/alex/bachelor/eval2/repos/google/jimfs/jimfs/src/main/java/com/google/common/jimfs/HeapDisk.java",
    "sm:input:`count0`=int",
    "sm:hc:8a3dc6f"
  ]
],[
  142804,
  "KVValue `nextValue0`;\nif (`fromIndex0` == `toIndex0` - 1) {\n    if (`nextValue0` != null) `Placeholder`\n    throw new AssertionError();\n} else {\n    BuilderCallback<?> `nextBuilder0` = null;\n    if (`nextValue0` != null) `Placeholder`\n}\n",
  0,
  [
    "sm:hc:dbf5bd6f",
    "sm:order:35",
    "sm:src:/home/alex/bachelor/eval2/repos/torodb/torodb/torod/connection/src/main/java/com/toro/torod/connection/update/AttributeReferenceToBuilderCallback.java",
    "sm:import:com.torodb.torod.core.exceptions.ToroImplementationException,1",
    "sm:output:`nextValue0`=com.torodb.kvdocument.values.KVValue",
    "sm:import:com.torodb.kvdocument.values.KVValue,1",
    "sm:import:com.torodb.torod.core.language.AttributeReference,1",
    "sm:import:com.torodb.torod.core.exceptions.UserToroException,1",
    "sm:input:`toIndex0`=int",
    "sm:depth:8",
    "sm:import:javax.annotation.Nullable,1",
    "sm:import:java.util.List,1",
    "sm:input:`fromIndex0`=int"
  ]
],[
  126399,
  "`fd10`.setContent(new String(`file10`.getBytes()));\n`fd10`.setOriginalName(`file10`.getOriginalFilename());\n",
  3,
  [
    "sm:import:java.util.List,4",
    "sm:import:org.springframework.http.MediaType,4",
    "sm:import:java.util.Arrays.asList,4",
    "sm:import:java.io.IOException,4",
    "sm:import:org.springframework.web.multipart.MultipartFile,4",
    "sm:input:`file10`=org.springframework.web.multipart.MultipartFile",
    "sm:import:org.springframework.http.ResponseEntity,4",
    "sm:hc:7d25ca7a",
    "sm:order:17",
    "sm:input:`fd10`=com.jayway.restassured.examples.springmvc.controller.FileDescription",
    "sm:import:org.springframework.web.bind.annotation.RequestMethod.POST,4",
    "sm:src:/home/alex/bachelor/eval2/repos/jayway/rest-assured/examples/spring-mvc-webapp/src/main/java/com/jayway/restassured/examples/springmvc/controller/FileUploadController.java",
    "sm:depth:6",
    "sm:import:org.springframework.stereotype.Controller,4",
    "sm:import:org.springframework.web.bind.annotation,4"
  ]
],[
  124830,
  "try {\n    `client0`.getParams().setParameter(\"http.useragent\", \"java-apns\");\n    if (`socket0` == null) `Placeholder`\n}catch (Exception `e0`) {\n    throw new ProtocolException(\"Error occurred while creating proxy socket : \" + `e0`.toString());\n}\nreturn `socket0`;\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:order:34",
    "sm:import:org.apache.commons.httpclient.NTCredentials,1",
    "sm:import:java.io.IOException,1",
    "sm:import:edu.umd.cs.findbugs.annotations.SuppressFBWarnings,1",
    "sm:import:java.net.Socket,1",
    "sm:import:org.apache.commons.httpclient.ProxyClient,1",
    "sm:depth:10",
    "sm:hc:c3efbd38",
    "sm:import:org.apache.commons.httpclient.ConnectMethod,1",
    "sm:import:java.net.ProtocolException,1",
    "sm:src:/home/alex/bachelor/eval2/repos/notnoop/java-apns/src/main/java/com/notnoop/apns/internal/TlsTunnelBuilder.java",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:javax.net.ssl.SSLSocketFactory,1",
    "sm:import:org.apache.commons.httpclient.UsernamePasswordCredentials,1",
    "sm:input:`socket0`=java.net.Socket",
    "sm:import:org.apache.commons.httpclient.auth.AuthScope,1",
    "sm:import:java.net.Proxy,1",
    "sm:import:java.net.InetSocketAddress,1",
    "sm:input:`client0`=org.apache.commons.httpclient.ProxyClient"
  ]
],[
  69011,
  "if (`field0`.isAnnotationPresent(DisInnerConfigAnnotation.class)) {\n    if (Modifier.isStatic(`field0`.getModifiers())) `Placeholder`\n    `name0` = `config0`.name();\n    `value0` = System.getProperty(`name0`);\n}",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:com.baidu.disconf.client.config.inner.DisInnerConfigAnnotation,1",
    "sm:order:28",
    "sm:input:`config0`=com.baidu.disconf.client.config.inner.DisInnerConfigAnnotation",
    "sm:import:java.util.Properties,1",
    "sm:import:java.lang.reflect.Modifier,1",
    "sm:input:`name0`=java.lang.String",
    "sm:import:java.lang.reflect.Field,1",
    "sm:import:com.baidu.disconf.client.utils.ConfigLoaderUtils,1",
    "sm:src:/home/alex/bachelor/eval2/repos/knightliao/disconf/disconf-client/src/main/java/com/baidu/disconf/client/support/DisconfAutowareConfig.java",
    "sm:input:`field0`=java.lang.reflect.Field",
    "sm:import:org.apache.commons.io.FilenameUtils,1",
    "sm:import:com.baidu.disconf.client.utils.ClassUtils,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:com.baidu.disconf.client.common.annotations.DisconfFileItem,1",
    "sm:depth:7",
    "sm:input:`value0`=java.lang.String",
    "sm:hc:88a1ec93"
  ]
],[
  167262,
  "if (`snmpData0` == null) `Placeholder`\nColumnDescriptor `desc0` = new ColumnDescriptor();\nfor(Map.Entry<String,List<SNMPTriple>> `e0` : `snmpData0`.entrySet()) {\n    String `disk0` = `e0`.getKey();\n    for(SNMPTriple `t0` : `e0`.getValue()) {\n        if (`diff0`) `Placeholder`\n        ResultRow `row0` = new ResultRow();\n        `row0`.addColumn(`t.oid`);\n    }\n}\nreturn `rList0`;\n",
  1,
  [
    "sm:input:`snmpData0`=java.util.Map<java.lang.String,java.util.List<com.yahoo.dba.perf.myperf.snmp.SNMPClient.SNMPTriple>>",
    "sm:order:58",
    "sm:import:com.yahoo.dba.perf.myperf.common.ColumnDescriptor,2",
    "sm:import:java.util.logging.Logger,2",
    "sm:hc:fca898d2",
    "sm:import:com.yahoo.dba.perf.myperf.common.ResultList,2",
    "sm:depth:12",
    "sm:input:`rList0`=com.yahoo.dba.perf.myperf.common.ResultList",
    "sm:import:java.math.BigDecimal,2",
    "sm:import:java.sql.SQLException,2",
    "sm:import:java.util.Map,2",
    "sm:input:`diff0`=boolean",
    "sm:import:com.yahoo.dba.perf.myperf.common.ResultRow,2",
    "sm:import:com.yahoo.dba.perf.myperf.db.CustomQueryProcessor,2",
    "sm:import:com.yahoo.dba.perf.myperf.common.QueryParameters,2",
    "sm:src:/home/alex/bachelor/eval2/repos/yahoo/mysql_perf_analyzer/myperf/src/main/java/com/yahoo/dba/perf/myperf/snmp/SNMPQueryProcessor.java",
    "sm:import:java.util.List,2",
    "sm:import:com.yahoo.dba.perf.myperf.snmp.SNMPClient.SNMPTriple,2",
    "sm:import:com.yahoo.dba.perf.myperf.common.DBInstanceInfo,2",
    "sm:import:com.yahoo.dba.perf.myperf.db.DBConnectionWrapper,2",
    "sm:import:java.util.logging.Level,2",
    "sm:output:`desc0`=com.yahoo.dba.perf.myperf.common.ColumnDescriptor",
    "sm:import:com.yahoo.dba.perf.myperf.common.MyPerfContext,2",
    "sm:input:`t.oid`=java.lang.String"
  ]
],[
  269632,
  "`tag0`.put(`Tag.TAG_REFERENCE_COUNT`, 1);\n`ret0`.put(`tag0`);\n",
  1,
  [
    "sm:import:org.json.JSONException,2",
    "sm:import:javax.servlet.ServletContext,2",
    "sm:import:java.util.Date,2",
    "sm:import:org.b3log.solo.SoloServletListener,2",
    "sm:import:org.b3log.latke.model.Role,2",
    "sm:import:org.b3log.solo.util.Thumbnails,2",
    "sm:import:org.b3log.solo.util.TimeZones,2",
    "sm:import:org.b3log.solo.model,2",
    "sm:import:org.b3log.latke.logging.Level,2",
    "sm:import:java.net.URL,2",
    "sm:import:org.b3log.solo.repository.ArchiveDateRepository,2",
    "sm:import:org.b3log.latke.Keys,2",
    "sm:import:org.b3log.latke.urlfetch.URLFetchServiceFactory,2",
    "sm:import:org.b3log.latke.logging.Logger,2",
    "sm:import:org.apache.commons.lang.time.DateFormatUtils,2",
    "sm:import:org.b3log.latke.model.User,2",
    "sm:import:org.b3log.solo.repository.OptionRepository,2",
    "sm:import:org.json.JSONArray,2",
    "sm:import:org.b3log.latke.plugin.PluginManager,2",
    "sm:import:org.b3log.latke.util.freemarker.Templates,2",
    "sm:import:javax.inject.Inject,2",
    "sm:import:org.b3log.solo.repository.StatisticRepository,2",
    "sm:import:org.json.JSONObject,2",
    "sm:import:org.b3log.solo.repository.TagArticleRepository,2",
    "sm:depth:4",
    "sm:import:org.b3log.latke.repository.jdbc.util.JdbcRepositories.CreateTableResult,2",
    "sm:input:`ret0`=org.json.JSONArray",
    "sm:import:org.b3log.latke.service.annotation.Service,2",
    "sm:import:org.b3log.solo.repository.TagRepository,2",
    "sm:import:org.b3log.latke.util.Ids,2",
    "sm:import:org.b3log.solo.model.Option.DefaultPreference,2",
    "sm:input:`Tag.TAG_REFERENCE_COUNT`=java.lang.String",
    "sm:import:java.text.ParseException,2",
    "sm:import:org.b3log.latke.service.LangPropsService,2",
    "sm:import:org.b3log.latke.repository.jdbc.util.JdbcRepositories,2",
    "sm:import:org.b3log.latke.service.ServiceException,2",
    "sm:import:org.b3log.solo.repository.CommentRepository,2",
    "sm:import:org.b3log.solo.util.Comments,2",
    "sm:import:org.apache.commons.lang.time.DateUtils,2",
    "sm:import:org.b3log.solo.repository.ArchiveDateArticleRepository,2",
    "sm:import:org.b3log.latke.Latkes,2",
    "sm:order:12",
    "sm:import:org.b3log.latke.repository.RepositoryException,2",
    "sm:import:org.b3log.latke.urlfetch.URLFetchService,2",
    "sm:import:java.util.List,2",
    "sm:input:`tag0`=org.json.JSONObject",
    "sm:hc:1ecadf8f",
    "sm:import:org.b3log.latke.urlfetch.HTTPRequest,2",
    "sm:import:org.b3log.solo.util.Skins,2",
    "sm:import:java.util.Set,2",
    "sm:import:org.b3log.latke.util.MD5,2",
    "sm:import:org.b3log.latke.repository.Transaction,2",
    "sm:import:org.b3log.solo.repository.ArticleRepository,2",
    "sm:import:org.b3log.latke.RuntimeEnv,2",
    "sm:src:/home/alex/bachelor/eval2/repos/b3log/solo/src/main/java/org/b3log/solo/service/InitService.java",
    "sm:import:org.b3log.solo.repository.UserRepository,2"
  ]
],[
  269618,
  "JdbcPet `pet0`;\nOwner `owner0` = `this.ownerRepository`.findById(`pet0`.getOwnerId());\nfor(Visit `visit0` : `visits0`) `Placeholder`\n",
  0,
  [
    "sm:import:org.springframework.samples.petclinic.repository.VisitRepository,1",
    "sm:import:org.springframework.samples.petclinic.model.Pet,1",
    "sm:output:`owner0`=org.springframework.samples.petclinic.model.Owner",
    "sm:import:javax.sql.DataSource,1",
    "sm:import:org.springframework.stereotype.Repository,1",
    "sm:input:`visits0`=java.util.List<org.springframework.samples.petclinic.model.Visit>",
    "sm:import:org.springframework.samples.petclinic.repository.OwnerRepository,1",
    "sm:import:org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate,1",
    "sm:import:org.springframework.samples.petclinic.model.PetType,1",
    "sm:order:24",
    "sm:input:`this.ownerRepository`=org.springframework.samples.petclinic.repository.OwnerRepository",
    "sm:import:org.springframework.jdbc.core.namedparam.MapSqlParameterSource,1",
    "sm:import:org.springframework.orm.ObjectRetrievalFailureException,1",
    "sm:import:java.util.Map,1",
    "sm:import:org.springframework.samples.petclinic.util.EntityUtils,1",
    "sm:hc:ae3da578",
    "sm:depth:7",
    "sm:import:java.util.List,1",
    "sm:output:`pet0`=org.springframework.samples.petclinic.repository.jdbc.JdbcPet",
    "sm:import:org.springframework.samples.petclinic.model.Visit,1",
    "sm:import:org.springframework.dao.DataAccessException,1",
    "sm:import:java.util.HashMap,1",
    "sm:import:org.springframework.samples.petclinic.repository.PetRepository,1",
    "sm:import:org.springframework.jdbc.core.BeanPropertyRowMapper,1",
    "sm:src:/home/alex/bachelor/eval2/repos/spring-projects/spring-petclinic/src/main/java/org/springframework/samples/petclinic/repository/jdbc/JdbcPetRepositoryImpl.java",
    "sm:import:org.springframework.jdbc.core.simple.SimpleJdbcInsert,1",
    "sm:import:org.springframework.samples.petclinic.model.Owner,1",
    "sm:import:org.springframework.beans.factory.annotation.Autowired,1",
    "sm:import:org.springframework.dao.EmptyResultDataAccessException,1"
  ]
],[
  167215,
  "if (this == `o0`) return true;\nif (!(`o0` instanceof BinaryNode)) return false;\nif (!`data`.equals(`that.data`)) `Placeholder`\n",
  0,
  [
    "sm:order:22",
    "sm:input:`data`=T",
    "sm:input:`o0`=java.lang.Object",
    "sm:src:/home/alex/bachelor/eval2/repos/pedrovgs/Algorithms/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java",
    "sm:depth:6",
    "sm:hc:feec8b42",
    "sm:input:`that.data`=java.lang.Object"
  ]
],[
  167202,
  "`stringBuilder0`.append(\"  - \");\n`stringBuilder0`.append('\\n');\n",
  1,
  [
    "sm:import:com.google.security.zynamics.binnavi.Log.NaviLogger,2",
    "sm:import:com.google.security.zynamics.zylib.general.StackTrace,2",
    "sm:src:/home/alex/bachelor/eval2/repos/google/binnavi/src/main/java/com/google/security/zynamics/binnavi/CUtilityFunctions.java",
    "sm:hc:7ac9a360",
    "sm:order:11",
    "sm:depth:4",
    "sm:input:`stringBuilder0`=java.lang.StringBuilder"
  ]
],[
  646402,
  "GremlinGroovyScriptEngine `engine0` = new GremlinGroovyScriptEngine(10);\nint `runs0` = 500;\nRandom `random0` = new Random();\n`latch0`.await();\n",
  0,
  [
    "sm:import:java.util,1",
    "sm:import:javax.script.ScriptException,1",
    "sm:import:com.tinkerpop.blueprints.Graph,1",
    "sm:depth:6",
    "sm:import:com.tinkerpop.blueprints.Index,1",
    "sm:output:`runs0`=int",
    "sm:import:javax.script.CompiledScript,1",
    "sm:input:`latch0`=java.util.concurrent.CountDownLatch",
    "sm:import:junit.framework.TestCase,1",
    "sm:src:/home/alex/bachelor/eval2/repos/tinkerpop/gremlin/gremlin-groovy/src/test/java/com/tinkerpop/gremlin/groovy/jsr223/GremlinGroovyScriptEngineTest.java",
    "sm:output:`engine0`=com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine",
    "sm:import:java.util.concurrent.CountDownLatch,1",
    "sm:import:javax.script.ScriptEngine,1",
    "sm:hc:2248e0a9",
    "sm:import:javax.script.Bindings,1",
    "sm:import:com.tinkerpop.blueprints.impls.tg.TinkerGraphFactory,1",
    "sm:import:com.tinkerpop.blueprints.Vertex,1",
    "sm:import:com.tinkerpop.blueprints.impls.tg.TinkerGraph,1",
    "sm:import:com.tinkerpop.pipes.util.Pipeline,1",
    "sm:import:junit.framework.Assert,1",
    "sm:import:java.nio.channels.Pipe,1",
    "sm:output:`random0`=java.util.Random",
    "sm:order:26"
  ]
],[
  612877,
  "`LOG`.info(\"--- testGetContentWaitTillCreated\");\nThread `thread0` = new Thread();\n`thread0`.join(1000);\nassertEquals(\"aaa\", `contentHolder0`.get());\n",
  0,
  [
    "sm:import:org.junit.After,1",
    "sm:import:org.I0Itec.zkclient.testutil.ZkTestSystem,1",
    "sm:input:`log`=org.apache.log4j.Logger",
    "sm:hc:3dac7a1d",
    "sm:import:java.util.concurrent.TimeUnit,1",
    "sm:input:`contentHolder0`=org.I0Itec.zkclient.Holder<java.lang.String>",
    "sm:src:/home/alex/bachelor/eval2/repos/Netflix/curator/src/test/java/org/I0Itec/zkclient/ContentWatcherTest.java",
    "sm:output:`thread0`=java.lang.Thread",
    "sm:import:java.util.concurrent.Callable,1",
    "sm:order:25",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:import:org.junit.Test,1",
    "sm:depth:6",
    "sm:import:org.apache.log4j.Logger,1",
    "sm:import:org.junit.Before,1",
    "sm:import:org.apache.curator.test.TestingServer,1"
  ]
],[
  531485,
  "Event `event0` = Event.fromJson(`json0`);\nPigJob `job0` = ((DAGNode<PigJob>) `event0`.getPayload()).getJob();\nassertNotNull(`job0`.getMetrics());\nassertEquals(123, `job0`.getMetrics().get(\"somemetric\"));\n",
  0,
  [
    "sm:output:`job0`=com.twitter.ambrose.pig.PigJob",
    "sm:import:java.io.IOException,1",
    "sm:import:com.twitter.ambrose.model.Event,1",
    "sm:hc:6e0a19fb",
    "sm:import:java.util.Map,1",
    "sm:import:org.junit.Assert.assertNotNull,1",
    "sm:import:java.util.Properties,1",
    "sm:depth:9",
    "sm:import:org.junit.Assert.assertArrayEquals,1",
    "sm:import:com.twitter.ambrose.model.DAGNode,1",
    "sm:import:com.twitter.ambrose.model.Job,1",
    "sm:input:`json0`=java.lang.String",
    "sm:output:`event0`=com.twitter.ambrose.model.Event",
    "sm:import:org.junit.Assert.assertTrue,1",
    "sm:src:/home/alex/bachelor/eval2/repos/twitter/ambrose/pig/src/test/java/com/twitter/ambrose/pig/PigJobTest.java",
    "sm:import:org.junit.Assert.assertEquals,1",
    "sm:order:39",
    "sm:import:org.junit.Test,1",
    "sm:import:com.google.common.collect.Maps,1",
    "sm:import:org.junit.Before,1",
    "sm:import:java.util.HashMap,1"
  ]
],[
  691214,
  "`this.name` = `name0`;\n`this.numberBytes` = `numberBytes0`;\n`this.successful` = `successful0`;\n",
  7,
  [
    "sm:hc:7e41319f",
    "sm:order:13",
    "sm:input:`successful0`=boolean",
    "sm:src:/home/alex/bachelor/eval2/repos/twitter/ambrose/pig/src/main/java/com/twitter/ambrose/pig/OutputInfo.java",
    "sm:input:`name0`=java.lang.String",
    "sm:import:com.fasterxml.jackson.annotation.JsonCreator,7",
    "sm:input:`this.successful`=boolean",
    "sm:import:com.fasterxml.jackson.annotation.JsonProperty,7",
    "sm:depth:4",
    "sm:input:`this.numberBytes`=long",
    "sm:input:`this.name`=java.lang.String",
    "sm:input:`numberBytes0`=long"
  ]
],[
  392162,
  "ClassName `apiName0` = (ClassName) `javaGenerator`.typeName(`service0`.type());\nfor(Rpc `rpc0` : `service0`.rpcs()) {\n    `rpcBuilder0`.addParameter(`requestJavaType0`, \"request\");\n    `typeBuilder0`.addMethod(`rpcBuilder0`.build());\n}\n",
  0,
  [
    "sm:src:/home/alex/bachelor/eval2/repos/square/wire/wire-codegen-sample/src/main/java/com/squareup/wire/sample/ServiceGenerator.java",
    "sm:import:com.squareup.wire.schema.ProtoType,1",
    "sm:input:`rpcBuilder0`=com.squareup.javapoet.MethodSpec.Builder",
    "sm:import:javax.lang.model.element.Modifier.ABSTRACT,1",
    "sm:import:com.squareup.wire.schema.Service,1",
    "sm:input:`service0`=com.squareup.wire.schema.Service",
    "sm:import:com.squareup.wire.schema.Rpc,1",
    "sm:import:com.squareup.javapoet.MethodSpec,1",
    "sm:input:`requestJavaType0`=com.squareup.javapoet.TypeName",
    "sm:import:javax.lang.model.element.Modifier.PUBLIC,1",
    "sm:import:com.squareup.javapoet.TypeName,1",
    "sm:import:com.squareup.wire.java.JavaGenerator,1",
    "sm:input:`javaGenerator`=com.squareup.wire.java.JavaGenerator",
    "sm:hc:3c11823d",
    "sm:input:`typeBuilder0`=com.squareup.javapoet.TypeSpec.Builder",
    "sm:import:com.squareup.javapoet.TypeSpec,1",
    "sm:depth:8",
    "sm:order:37",
    "sm:import:com.squareup.javapoet.ClassName,1",
    "sm:output:`apiName0`=com.squareup.javapoet.ClassName"
  ]
],[
  570213,
  "int `h0` = `projectorImageCL`[`i0` - 1].height / 2;\n`projectorImageCL`[`i0`] = `context`.getCLContext().createImage2d(`w0`, `h0`, `format0`);\n",
  1,
  [
    "sm:output:`h0`=int",
    "sm:input:`context`=org.bytedeco.javacv.JavaCVCL",
    "sm:input:`i0`=int",
    "sm:order:28",
    "sm:src:/home/alex/bachelor/eval2/repos/bytedeco/javacv/src/main/java/org/bytedeco/javacv/ProCamTransformerCL.java",
    "sm:depth:9",
    "sm:import:com.jogamp.opencl.CLEventList,2",
    "sm:import:org.bytedeco.javacpp.opencv_core,2",
    "sm:import:com.jogamp.common.os.Platform,2",
    "sm:input:`projectorImageCL`=com.jogamp.opencl.CLImage2d[]",
    "sm:import:com.jogamp.opencl.CLImageFormat,2",
    "sm:import:com.jogamp.opencl.CLKernel,2",
    "sm:import:java.nio.FloatBuffer,2",
    "sm:input:`format0`=com.jogamp.opencl.CLImageFormat",
    "sm:import:com.jogamp.opencl.CLImage2d,2",
    "sm:import:com.jogamp.opencl.CLMemory,2",
    "sm:input:`w0`=int",
    "sm:hc:93009db9",
    "sm:import:com.jogamp.opencl.CLBuffer,2"
  ]
],[
  71021,
  "Meta `jooqMeta0` = `dsl0`.meta();\nConnection `conn0` = `dsl0`.configuration().connectionProvider().acquire();\n`createTypes`(`conn0`, `jdbcMeta0`);\n`createProcedures`(`conn0`, `jdbcMeta0`);\n`createCast`(`conn0`, `jdbcMeta0`);\n",
  0,
  [
    "sm:import:org.slf4j.LoggerFactory,1",
    "sm:import:java.io.BufferedReader,1",
    "sm:import:java.io.IOException,1",
    "sm:import:java.sql,1",
    "sm:import:com.torodb.torod.db.backends.exceptions.InvalidDatabaseException,1",
    "sm:import:com.torodb.torod.db.backends.meta.TorodbMeta,1",
    "sm:import:org.jooq.Result,1",
    "sm:import:com.google.common.io.CharStreams,1",
    "sm:import:org.slf4j.Logger,1",
    "sm:import:java.io.InputStream,1",
    "sm:import:javax.inject.Provider,1",
    "sm:import:com.google.common.collect.MapMaker,1",
    "sm:input:`jdbcMeta0`=java.sql.DatabaseMetaData",
    "sm:import:com.torodb.torod.core.exceptions.ToroImplementationException,1",
    "sm:import:java.io.InputStreamReader,1",
    "sm:import:java.util.Collection,1",
    "sm:import:org.jooq.Meta,1",
    "sm:import:com.torodb.torod.core.subdocument.SubDocType,1",
    "sm:import:com.torodb.torod.db.backends.DatabaseInterface,1",
    "sm:import:com.torodb.torod.db.backends.tables.CollectionsTable,1",
    "sm:import:javax.annotation.Nonnull,1",
    "sm:import:org.jooq.DSLContext,1",
    "sm:import:com.torodb.torod.db.backends.exceptions.InvalidCollectionSchemaException,1",
    "sm:input:`dsl0`=org.jooq.DSLContext",
    "sm:output:`conn0`=java.sql.Connection",
    "sm:order:36",
    "sm:import:java.util.concurrent.ConcurrentMap,1",
    "sm:import:com.torodb.torod.db.backends.tables.records.CollectionsRecord,1",
    "sm:input:`createTypes`=void(java.sql.Connection,java.sql.DatabaseMetaData)",
    "sm:import:java.util.Collections,1",
    "sm:input:`createCast`=void(java.sql.Connection,java.sql.DatabaseMetaData)",
    "sm:src:/home/alex/bachelor/eval2/repos/torodb/torodb/torod/backends/postgresql/src/main/java/com/torodb/torod/db/backends/postgresql/PostgreSQLTorodbMeta.java",
    "sm:import:com.torodb.torod.db.backends.meta.TorodbSchema,1",
    "sm:output:`jooqMeta0`=org.jooq.Meta",
    "sm:depth:8",
    "sm:import:java.nio.charset.Charset,1",
    "sm:import:edu.umd.cs.findbugs.annotations.SuppressFBWarnings,1",
    "sm:import:com.torodb.torod.db.backends.meta.IndexStorage,1",
    "sm:hc:5786b8ac",
    "sm:input:`createProcedures`=void(java.sql.Connection,java.sql.DatabaseMetaData)"
  ]
],[
  64358,
  "HandlerHolder `that0` = (HandlerHolder) `o0`;\nif (`context` != `that.context`) return false;\nreturn true;\n",
  0,
  [
    "sm:output:`that0`=io.vertx.core.net.impl.HandlerHolder",
    "sm:src:/home/alex/bachelor/eval2/repos/eclipse/vert.x/src/main/java/io/vertx/core/net/impl/HandlerHolder.java",
    "sm:import:io.vertx.core.impl.ContextImpl,1",
    "sm:input:`o0`=java.lang.Object",
    "sm:order:17",
    "sm:depth:6",
    "sm:input:`that.context`=io.vertx.core.impl.ContextImpl",
    "sm:input:`context`=io.vertx.core.impl.ContextImpl",
    "sm:hc:3ecbc17c"
  ]
],[
  428786,
  "Options `options0` = `getAvaliableCommandLineOptions`();\n`readOptionsFromCommandLine`(`args0`, `parser0`, `options0`, `myServer0`);\nSystem.setProperty(\"logPath\", `myServer0`.getLogDirectoryPath());\n",
  0,
  [
    "sm:import:org.eclipse.jetty.webapp.WebAppContext,1",
    "sm:import:java.net.URI,1",
    "sm:import:org.eclipse.jetty.annotations.ServletContainerInitializersStarter,1",
    "sm:input:`getAvaliableCommandLineOptions`=org.apache.commons.cli.Options()",
    "sm:input:`args0`=java.lang.String[]",
    "sm:order:23",
    "sm:import:org.apache.commons.cli.CommandLineParser,1",
    "sm:import:org.eclipse.jetty.plus.annotation.ContainerInitializer,1",
    "sm:import:java.util.Date,1",
    "sm:depth:6",
    "sm:import:org.eclipse.jetty.server.ServerConnector,1",
    "sm:import:org.eclipse.jetty.servlet.ServletHolder,1",
    "sm:src:/home/alex/bachelor/eval2/repos/yahoo/mysql_perf_analyzer/perfJettyServer/src/main/java/com/yahoo/dba/tools/myperfserver/App.java",
    "sm:import:org.eclipse.jetty.server.ConnectionFactory,1",
    "sm:import:java.net.URISyntaxException,1",
    "sm:output:`options0`=org.apache.commons.cli.Options",
    "sm:import:java.lang.management.RuntimeMXBean,1",
    "sm:import:org.apache.commons.cli.GnuParser,1",
    "sm:import:org.apache.commons.cli.Options,1",
    "sm:input:`parser0`=org.apache.commons.cli.CommandLineParser",
    "sm:import:java.util.List,1",
    "sm:hc:2441bc99",
    "sm:import:org.apache.tomcat.InstanceManager,1",
    "sm:import:javax.servlet.ServletContainerInitializer,1",
    "sm:import:java.io.File,1",
    "sm:import:java.util.ArrayList,1",
    "sm:input:`readOptionsFromCommandLine`=void(java.lang.String[],org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,com.yahoo.dba.tools.myperfserver.App)",
    "sm:import:org.apache.tomcat.SimpleInstanceManager,1",
    "sm:import:org.apache.commons.cli.CommandLine,1",
    "sm:import:org.eclipse.jetty.server.Server,1",
    "sm:import:org.eclipse.jetty.jsp.JettyJspServlet,1",
    "sm:import:org.apache.commons.cli.ParseException,1",
    "sm:import:org.eclipse.jetty.apache.jsp.JettyJasperInitializer,1",
    "sm:input:`myServer0`=com.yahoo.dba.tools.myperfserver.App"
  ]
],[
  559755,
  "RealConnection `longestIdleConnection0` = null;\nsynchronized (this) {\n    for(Iterator<RealConnection> `i0` = `connections`.iterator(); `i0`.hasNext(); ) {\n        if (`pruneAndGetAllocationCount`(`connection0`, `now0`) > 0) {\n            `inUseConnectionCount0`++;\n            continue;\n        }\n        `idleConnectionCount0`++;\n    }\n    if (`longestIdleDurationNs0` >= `this.keepAliveDurationNs` || `idleConnectionCount0` > `this.maxIdleConnections`) `Placeholder`\n}\ncloseQuietly(`longestIdleConnection0`.socket());\nreturn 0;\n",
  0,
  [
    "sm:input:`connection0`=okhttp3.internal.io.RealConnection",
    "sm:order:57",
    "sm:import:java.util.concurrent.Executor,1",
    "sm:import:java.util.Deque,1",
    "sm:import:okhttp3.internal.io.RealConnection,1",
    "sm:output:`longestIdleConnection0`=okhttp3.internal.io.RealConnection",
    "sm:import:okhttp3.internal.Platform.WARN,1",
    "sm:input:`pruneAndGetAllocationCount`=int(okhttp3.internal.io.RealConnection,long)",
    "sm:import:java.lang.ref.Reference,1",
    "sm:input:`inUseConnectionCount0`=int",
    "sm:import:okhttp3.internal.Util,1",
    "sm:input:`connections`=java.util.Deque<okhttp3.internal.io.RealConnection>",
    "sm:input:`this.keepAliveDurationNs`=long",
    "sm:import:java.util.Iterator,1",
    "sm:input:`now0`=long",
    "sm:import:java.util.ArrayDeque,1",
    "sm:import:okhttp3.internal.Util.closeQuietly,1",
    "sm:import:java.util.concurrent.ThreadPoolExecutor,1",
    "sm:hc:694bcc5f",
    "sm:import:java.util.List,1",
    "sm:import:java.util.concurrent.SynchronousQueue,1",
    "sm:src:/home/alex/bachelor/eval2/repos/square/okhttp/okhttp/src/main/java/okhttp3/ConnectionPool.java",
    "sm:depth:13",
    "sm:input:`longestIdleDurationNs0`=long",
    "sm:input:`this.maxIdleConnections`=int",
    "sm:import:java.util.ArrayList,1",
    "sm:import:java.util.concurrent.TimeUnit,1",
    "sm:import:okhttp3.internal.RouteDatabase,1",
    "sm:import:okhttp3.internal.http.StreamAllocation,1",
    "sm:input:`idleConnectionCount0`=int",
    "sm:import:okhttp3.internal.Platform,1"
  ]
],[
  154233,
  "double `dbQuotient0` = `dbFirstNumber0` / `dbSecondNumber0`;\nif (`this.firstIsSmallerThanSecondDoubleComparator`.FirstIsSmallerThanSecond(`dbQuotient0`, (double) `IntegerDivider.INTEGER_ORIGIN_ZERO_VALUE`)) `Placeholder` else `Placeholder`\n",
  0,
  [
    "sm:input:`IntegerDivider.INTEGER_ORIGIN_ZERO_VALUE`=int",
    "sm:src:/home/alex/bachelor/eval2/repos/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/math/arithmetics/IntegerDivider.java",
    "sm:import:com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.comparators.integercomparator.IntegerForEqualityComparator,1",
    "sm:output:`dbQuotient0`=double",
    "sm:input:`dbSecondNumber0`=double",
    "sm:input:`this.firstIsSmallerThanSecondDoubleComparator`=com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.comparators.doublecomparator.FirstIsSmallerThanSecondDoubleComparator",
    "sm:import:com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.comparators.doublecomparator.FirstIsLargerThanSecondDoubleComparator,1",
    "sm:import:com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.converters.primitivetypesconverters.DoubleToIntConverter,1",
    "sm:input:`dbFirstNumber0`=double",
    "sm:import:com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.comparators.doublecomparator.FirstIsSmallerThanSecondDoubleComparator,1",
    "sm:import:com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.impl.strategies.converters.primitivetypesconverters.IntToDoubleConverter,1",
    "sm:import:org.springframework.beans.factory.annotation.Autowired,1",
    "sm:depth:6",
    "sm:hc:c084cac",
    "sm:import:org.springframework.stereotype.Service,1",
    "sm:order:19"
  ]
],[
  502044,
  "if (`value0` == null) `Placeholder`\nif (`value0` instanceof Number) return true;\nif (`value0` instanceof String) {\n    if (isNullOrEmpty(`stringValue0`)) `Placeholder`\n    return isNumber(`stringValue0`);\n}\nreturn false;\n",
  0,
  [
    "sm:input:`value0`=java.lang.Object",
    "sm:depth:7",
    "sm:src:/home/alex/bachelor/eval2/repos/jmxtrans/jmxtrans/jmxtrans-utils/src/main/java/com/googlecode/jmxtrans/util/NumberUtils.java",
    "sm:order:29",
    "sm:hc:2462423",
    "sm:import:com.google.common.base.Strings.isNullOrEmpty,1",
    "sm:input:`stringValue0`=java.lang.String",
    "sm:import:org.apache.commons.lang.math.NumberUtils.isNumber,1"
  ]
]
]
